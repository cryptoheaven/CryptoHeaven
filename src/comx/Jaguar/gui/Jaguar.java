/*GNU General Public LicenseJaguar - Java Swing HTML Editor & ViewerCopyright (C) 2000-2002  Howard A KistlerThis program is free software; you can redistribute it and/ormodify it under the terms of the GNU General Public Licenseas published by the Free Software Foundation; either version 2of the License, or (at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program; if not, write to the Free SoftwareFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.*/package comx.Jaguar.gui;import java.awt.*;import java.awt.event.*;import java.beans.*;import java.io.*;import java.net.URL;import java.util.*;import javax.swing.*;import javax.swing.border.*;import javax.swing.event.*;import javax.swing.filechooser.FileFilter;import javax.swing.text.*;import javax.swing.text.html.*;import javax.swing.text.rtf.RTFEditorKit;import javax.swing.undo.*;import com.CH_co.gui.*;import com.CH_gui.action.AbstractActionTraced;import com.CH_guiLib.gui.*;/** Jaguar  * App for editing and saving HTML in a Java text component  *  * @author Howard Kistler  * @version 0.9c  *  * REQUIREMENTS  * Java 2 (JDK 1.3)  * Swing Library  */public class Jaguar extends JPanel implements TextEditorI, ActionListener, WindowListener, DocumentListener {  // Marcin: pass in an Undo Manager  public static UndoManager externalUndoManager;  private ResourceBundle langResources;  //private JSplitPane jspltDisplay;  private JPanel jMainEditorContainer;  private JTextPane jtpMain;  private JScrollPane jspMain;  private HTMLEditorKit htmlKit;  private MutableHTMLDocument htmlDoc;  private StyleSheet styleSheet;  private JTextPane jtpSource;  private JScrollPane jspSource;  private JToolBar jTopToolBar;  private JToolBar jToolBar;  private JTextPane currentPane;  private SortedMap naturalActions;  protected JComboBox m_cbFonts;  protected JComboBox m_cbSizes;  protected JComboBox m_cbStyles;  public static Object[][] STYLES = {{      null,      HTML.Tag.P,      HTML.Tag.BLOCKQUOTE,      HTML.Tag.H1,      HTML.Tag.H2,      HTML.Tag.H3,      HTML.Tag.H4,      HTML.Tag.H5,      HTML.Tag.H6,      HTML.Tag.ADDRESS,      HTML.Tag.CENTER,      HTML.Tag.CITE,      HTML.Tag.CODE,      HTML.Tag.PRE    }, {      "Style",      "Paragraph",      "Blockquote",      "Header 1",      "Header 2",      "Header 3",      "Header 4",      "Header 5",      "Header 6",      "Address",      "Center",      "Cite",      "Code",      "Preformated"    }  };/*    public static Object[][] STYLES = {{    null,    HTML.Tag.P,    HTML.Tag.BLOCKQUOTE,    HTML.Tag.H1,    HTML.Tag.H2,    HTML.Tag.H3,    HTML.Tag.H4,    HTML.Tag.H5,    HTML.Tag.H6,    HTML.Tag.ADDRESS,    HTML.Tag.CENTER,    HTML.Tag.CITE,    HTML.Tag.CODE,    HTML.Tag.PRE    }, {    new JMyLabel("Style"),    new JMyLabel("Paragraph"),    new JMyLabel("Blockquote"),    new JMyLabel("<html><h1>H1</h1>"),    new JMyLabel("<html><h2>H2</h2>"),    new JMyLabel("<html><h3>H3</h3>"),    new JMyLabel("<html><h4>H4</h4>"),    new JMyLabel("<html><h5>H5</h5>"),    new JMyLabel("<html><h6>H6</h6>"),    new JMyLabel("<html><addr>Address</addr>"),    new JMyLabel("Center"),    new JMyLabel("<html><cite>Cite</cite>"),    new JMyLabel("<html><code>Code</code>"),    new JMyLabel("<html><pre>Preformated  </pre>")    }, {    new JMyLabel("Style"),    new JMyLabel("Paragraph"),    new JMyLabel("Blockquote"),    new JMyLabel(java.text.MessageFormat.format(Lang.rb.getString("Heading_ID"), new Object[] {Integer.valueOf(1)})),    new JMyLabel(java.text.MessageFormat.format(Lang.rb.getString("Heading_ID"), new Object[] {Integer.valueOf(2)})),    new JMyLabel(java.text.MessageFormat.format(Lang.rb.getString("Heading_ID"), new Object[] {Integer.valueOf(3)})),    new JMyLabel(java.text.MessageFormat.format(Lang.rb.getString("Heading_ID"), new Object[] {Integer.valueOf(4)})),    new JMyLabel(java.text.MessageFormat.format(Lang.rb.getString("Heading_ID"), new Object[] {Integer.valueOf(5)})),    new JMyLabel(java.text.MessageFormat.format(Lang.rb.getString("Heading_ID"), new Object[] {Integer.valueOf(6)})),    new JMyLabel("Address"),    new JMyLabel("Center"),    new JMyLabel("Cite"),    new JMyLabel("Code"),    new JMyLabel("Preformated")    }}; */  protected String m_fontName = "";  protected int m_fontSize = 0;  protected boolean m_skipUpdate;  protected String[] m_fontNames;  protected String[] m_fontSizes;  protected FindDialog m_findDialog;  // last focus selection positions  private int m_xStart;  private int m_xFinish;  private UndoManager undoMngr;  private UndoAction undoAction;  private RedoAction redoAction;  private JCheckBoxMenuItem jcbmiViewToolbar;  private JCheckBoxMenuItem jcbmiViewSource;  private JToggleButtonNoFocus jtbtnViewSource;  private JComboBoxNoFocus jcmbStyleSelector;  private JToggleButtonNoFocus jtbtnBold;  private JToggleButtonNoFocus jtbtnItalic;  private JToggleButtonNoFocus jtbtnUnderline;  private JToggleButtonNoFocus jtbtnSubscript;  private JToggleButtonNoFocus jtbtnSuperscript;  private static final String appName = "Jaguar";  private static final String menuDialog = "..."; /* text to append to a MenuItem label when menu item opens a dialog */  //private int iSplitPos = 0;  private boolean exclusiveEdit = true;  private String lastSearchFindTerm     = null;  private String lastSearchReplaceTerm  = null;  private boolean lastSearchCaseSetting = false;  private boolean lastSearchTopSetting  = false;  private File currentFile = null;  private int indent = 0;  private static final int indentStep = 4;  // File extensions for MutableFilter  private final String[] extsHTML = { "html", "htm", "shtml" };  private final String[] extsCSS  = { "css" };  private final String[] extsRTF  = { "rtf" };  private final String[] extsSer  = { "ser" };  private final String[] extsIMG  = { "gif", "jpg", "jpeg", "png" };  /** Master Constructor    * @param sDocument         [String]  A text or HTML document to load in the editor upon startup.    * @param sStyleSheet       [String]  A CSS stylesheet to load in the editor upon startup.    * @param sRawDocument      [String]  A document encoded as a String to load in the editor upon startup.    * @param showToolBar       [boolean] Specifies whether the app should include the toolbar.    * @param showViewSource    [boolean] Specifies whether or not to show the View Source window on startup.    * @param showMenuIcons     [boolean] Specifies whether or not to show icon pictures in menus.    * @param editModeExclusive [boolean] Specifies whether or not to use exclusive edit mode (recommended on).    * @param sLanguage         [String]  The language portion of the Internationalization Locale to run Jaguar in.    * @param sCountry          [String]  The country portion of the Internationalization Locale to run Jaguar in.    * @param debugMode         [boolean] Specifies whether to show the Debug menu or not.    */  public Jaguar(String sDocument, String sStyleSheet, String sRawDocument, boolean showToolBar, boolean showViewSource, boolean showMenuIcons, boolean editModeExclusive, String sLanguage, String sCountry, boolean debugMode) {    super();    exclusiveEdit = editModeExclusive;    /* Localise for language */    /*    Locale baseLocale;    try {      if(sLanguage != null && sCountry != null) {        baseLocale = new Locale(sLanguage, sCountry);        langResources = ResourceBundle.getBundle("com.hexidec.myJaguar.LanguageResources", baseLocale);      } else {        langResources = ResourceBundle.getBundle("com.hexidec.myJaguar.LanguageResources");      }    } catch(MissingResourceException mre) {      logException("MissingResourceException while loading language file", mre);    }     */    /* Create the editor kit, document, and stylesheet */    jtpMain = new JMyTextPaneWordPastable2();    currentPane = jtpMain;    Utils.initKeyBindings(jtpMain);    jtpMain.setAutoscrolls(true);    htmlKit = new ExtendedHTMLEditorKit();    htmlDoc = (MutableHTMLDocument)(htmlKit.createDefaultDocument());    htmlDoc.setPreservesUnknownTags(false);    styleSheet = htmlDoc.getStyleSheet();    // Set up focus listener for our text pane    jtpMain.addFocusListener(new FocusListener() {      public void focusGained(FocusEvent e) {        int len = jtpMain.getDocument().getLength();        if (m_xStart >= 0 && m_xFinish >= 0 && m_xStart < len && m_xFinish < len) {          if (jtpMain.getCaretPosition() == m_xStart) {            jtpMain.setCaretPosition(m_xFinish);            jtpMain.moveCaretPosition(m_xStart);            showAttributes();          } else {            jtpMain.select(m_xStart, m_xFinish);          }        }      }      public void focusLost(FocusEvent e) {        try { // sometimes when object is disposed this may throw an exception          m_xStart = jtpMain.getSelectionStart();          m_xFinish = jtpMain.getSelectionEnd();        } catch (Throwable t) {        }      }    });    // Set up the text pane    jtpMain.setEditorKit(htmlKit);    jtpMain.setDocument(htmlDoc);    jtpMain.setMargin(new MyInsets(4, 4, 4, 4));    if (sRawDocument != null && sRawDocument.length() > 0) {      jtpMain.setText(sRawDocument);    } else {      jtpMain.setText("<HTML><BODY face='Arial, Verdana, Helvetica'><p>&nbsp;</p></BODY></HTML>"); // giving default content like "&nbsp;" fixes no-paragraph bug    }    jtpMain.setCaretPosition(0);    jtpMain.getDocument().addDocumentListener(this);    // Create the source text area    jtpSource = new JMyTextPaneWordPastable2();    Utils.initKeyBindings(jtpSource);    jtpSource.setAutoscrolls(true);    jtpSource.setBackground(new Color(212, 212, 212));    jtpSource.setSelectionColor(new Color(255, 192, 192));    if (sRawDocument != null && sRawDocument.length() > 0) {      jtpSource.setText(sRawDocument);    } else {      jtpSource.setText("<HTML><BODY face='Arial, Verdana, Helvetica'><p> </p></BODY></HTML>");    }    jtpSource.getDocument().addDocumentListener(this);    // Add CaretListener for tracking caret location events    jtpMain.addCaretListener(new CaretListener() {      public void caretUpdate(CaretEvent ce) {        handleCaretPositionChange(ce);      }    });    // Set up the undo features    // Marcin: use external undo manager if available    if (externalUndoManager == null)      undoMngr = new UndoManager();    else      undoMngr = externalUndoManager;    undoAction = new UndoAction();    redoAction = new RedoAction();    jtpMain.getDocument().addUndoableEditListener(new CustomUndoableEditListener());    // Preload the specified HTML document, if exists    if (sDocument != null) {      File defHTML = new File(sDocument);      if (defHTML.exists()) {        try {          openDocument(defHTML);        } catch(Exception e) {          logException("Exception in preloading HTML document", e);        }      }    }    /* Preload the specified CSS document, if exists */    if (sStyleSheet != null) {      File defCSS = new File(sStyleSheet);      if (defCSS.exists()) {        try {          openStyleSheet(defCSS);        } catch(Exception e) {          logException("Exception in preloading CSS stylesheet", e);        }      }    }    // Collect the actions that the JTextPane is naturally aware of    naturalActions = Collections.synchronizedSortedMap(new TreeMap());    Action[] actionsArray = jtpMain.getActions();    for (int i = 0; i < actionsArray.length; i++) {      Action a = actionsArray[i];      naturalActions.put(a.getValue(Action.NAME), a);    }    /*    Set keys = naturalActions.keySet();    Iterator iter = keys.iterator();    while (iter.hasNext()) {      System.out.println("name="+iter.next());    }     */    JMenuBar jMenuBar = null;    /*    // Build the menus    // FILE Menu    JMenu jMenuFile        = new JMenu(Lang.rb.getString("File"));    JMenuItem jmiNew       = new JMenuItem(Lang.rb.getString("NewDocument"));               jmiNew.setActionCommand("newdoc");        jmiNew.addActionListener(this);      jmiNew.setAccelerator(KeyStroke.getKeyStroke('N', java.awt.Event.CTRL_MASK, false));      if(showMenuIcons) { jmiNew.setIcon(getJaguarIcon("New")); }; jMenuFile.add(jmiNew);    JMenuItem jmiOpenHTML  = new JMenuItem(Lang.rb.getString("OpenDocument") + menuDialog); jmiOpenHTML.setActionCommand("openhtml"); jmiOpenHTML.addActionListener(this); jmiOpenHTML.setAccelerator(KeyStroke.getKeyStroke('O', java.awt.Event.CTRL_MASK, false)); if(showMenuIcons) { jmiOpenHTML.setIcon(getJaguarIcon("Open")); }; jMenuFile.add(jmiOpenHTML);    JMenuItem jmiOpenCSS   = new JMenuItem(Lang.rb.getString("OpenStyle") + menuDialog);    jmiOpenCSS.setActionCommand("opencss");   jmiOpenCSS.addActionListener(this);  jMenuFile.add(jmiOpenCSS);    jMenuFile.addSeparator();    JMenuItem jmiSave      = new JMenuItem(Lang.rb.getString("Save"));                  jmiSave.setActionCommand("save");         jmiSave.addActionListener(this);     jmiSave.setAccelerator(KeyStroke.getKeyStroke('S', java.awt.Event.CTRL_MASK, false)); if(showMenuIcons) { jmiSave.setIcon(getJaguarIcon("Save")); }; jMenuFile.add(jmiSave);    JMenuItem jmiSaveAs    = new JMenuItem(Lang.rb.getString("SaveAs") + menuDialog);   jmiSaveAs.setActionCommand("saveas");     jmiSaveAs.addActionListener(this);   jMenuFile.add(jmiSaveAs);    JMenuItem jmiSaveBody  = new JMenuItem(Lang.rb.getString("SaveBody") + menuDialog); jmiSaveBody.setActionCommand("savebody"); jmiSaveBody.addActionListener(this); jMenuFile.add(jmiSaveBody);    JMenuItem jmiSaveRTF   = new JMenuItem(Lang.rb.getString("SaveRTF") + menuDialog);  jmiSaveRTF.setActionCommand("savertf");   jmiSaveRTF.addActionListener(this);  jMenuFile.add(jmiSaveRTF);    jMenuFile.addSeparator();    JMenuItem jmiSerialOut = new JMenuItem(Lang.rb.getString("Serialize") + menuDialog);   jmiSerialOut.setActionCommand("serialize");  jmiSerialOut.addActionListener(this); jMenuFile.add(jmiSerialOut);    JMenuItem jmiSerialIn  = new JMenuItem(Lang.rb.getString("ReadFromSer") + menuDialog); jmiSerialIn.setActionCommand("readfromser"); jmiSerialIn.addActionListener(this);  jMenuFile.add(jmiSerialIn);    // Marcin: in change from frame to panel, exit action is removed    //jMenuFile.addSeparator();    //JMenuItem jmiExit      = new JMenuItem(Lang.rb.getString("Exit")); jmiExit.setActionCommand("exit"); jmiExit.addActionListener(this); jMenuFile.add(jmiExit);    // EDIT Menu    JMenu jMenuEdit      = new JMenu(Lang.rb.getString("Edit"));    // Marcin: remove basic cut/copy/paste as they are doubled here    //JMenuItem jmiCut     = new JMenuItem(new DefaultEditorKit.CutAction());   jmiCut.setText(Lang.rb.getString("Cut"));     jmiCut.setAccelerator(KeyStroke.getKeyStroke('X', java.awt.Event.CTRL_MASK, false));   if(showMenuIcons) { jmiCut.setIcon(getJaguarIcon("Cut")); }     jMenuEdit.add(jmiCut);    //JMenuItem jmiCopy    = new JMenuItem(new DefaultEditorKit.CopyAction());  jmiCopy.setText(Lang.rb.getString("Copy"));   jmiCopy.setAccelerator(KeyStroke.getKeyStroke('C', java.awt.Event.CTRL_MASK, false));  if(showMenuIcons) { jmiCopy.setIcon(getJaguarIcon("Copy")); }   jMenuEdit.add(jmiCopy);    //JMenuItem jmiPaste   = new JMenuItem(new DefaultEditorKit.PasteAction()); jmiPaste.setText(Lang.rb.getString("Paste")); jmiPaste.setAccelerator(KeyStroke.getKeyStroke('V', java.awt.Event.CTRL_MASK, false)); if(showMenuIcons) { jmiPaste.setIcon(getJaguarIcon("Paste")); } jMenuEdit.add(jmiPaste);    //jMenuEdit.addSeparator();    // Marcin: in change from frame to panel, undo manager is inherited and removed from Jaguar    //JMenuItem jmiUndo    = new JMenuItem(undoAction); jmiUndo.setAccelerator(KeyStroke.getKeyStroke('Z', java.awt.Event.CTRL_MASK, false)); jMenuEdit.add(jmiUndo);    //JMenuItem jmiRedo    = new JMenuItem(redoAction); jmiRedo.setAccelerator(KeyStroke.getKeyStroke('Y', java.awt.Event.CTRL_MASK, false)); jMenuEdit.add(jmiRedo);    //jMenuEdit.addSeparator();    JMenuItem jmiSelAll  = new JMenuItem((Action)naturalActions.get(DefaultEditorKit.selectAllAction));       jmiSelAll.setText(Lang.rb.getString("SelectAll"));        jmiSelAll.setAccelerator(KeyStroke.getKeyStroke('A', java.awt.Event.CTRL_MASK, false)); jMenuEdit.add(jmiSelAll);    JMenuItem jmiSelPara = new JMenuItem((Action)naturalActions.get(DefaultEditorKit.selectParagraphAction)); jmiSelPara.setText(Lang.rb.getString("SelectParagraph")); jMenuEdit.add(jmiSelPara);    JMenuItem jmiSelLine = new JMenuItem((Action)naturalActions.get(DefaultEditorKit.selectLineAction));      jmiSelLine.setText(Lang.rb.getString("SelectLine"));      jMenuEdit.add(jmiSelLine);    JMenuItem jmiSelWord = new JMenuItem((Action)naturalActions.get(DefaultEditorKit.selectWordAction));      jmiSelWord.setText(Lang.rb.getString("SelectWord"));      jMenuEdit.add(jmiSelWord);    // VIEW Menu    JMenu jMenuView  = new JMenu(Lang.rb.getString("View"));    jcbmiViewToolbar = new JCheckBoxMenuItem(Lang.rb.getString("ViewToolbar"), false); jcbmiViewToolbar.setActionCommand("toggletoolbar"); jcbmiViewToolbar.addActionListener(this); jcbmiViewToolbar.setSelected(showToolBar); jMenuView.add(jcbmiViewToolbar);    jcbmiViewSource  = new JCheckBoxMenuItem(Lang.rb.getString("ViewSource"), false);  jcbmiViewSource.setActionCommand("viewsource");     jcbmiViewSource.addActionListener(this);  jMenuView.add(jcbmiViewSource);    // FONT Menu    JMenu jMenuFont        = new JMenu(Lang.rb.getString("Font"));    JMenuItem jmiBold      = new JMenuItem(new StyledEditorKit.BoldAction());      jmiBold.setText(Lang.rb.getString("FontBold"));           jmiBold.setAccelerator(KeyStroke.getKeyStroke('B', java.awt.Event.CTRL_MASK, false));      if(showMenuIcons) { jmiBold.setIcon(getJaguarIcon("Bold")); }           jMenuFont.add(jmiBold);    JMenuItem jmiItalic    = new JMenuItem(new StyledEditorKit.ItalicAction());    jmiItalic.setText(Lang.rb.getString("FontItalic"));       jmiItalic.setAccelerator(KeyStroke.getKeyStroke('I', java.awt.Event.CTRL_MASK, false));    if(showMenuIcons) { jmiItalic.setIcon(getJaguarIcon("Italic")); }       jMenuFont.add(jmiItalic);    JMenuItem jmiUnderline = new JMenuItem(new StyledEditorKit.UnderlineAction()); jmiUnderline.setText(Lang.rb.getString("FontUnderline")); jmiUnderline.setAccelerator(KeyStroke.getKeyStroke('U', java.awt.Event.CTRL_MASK, false)); if(showMenuIcons) { jmiUnderline.setIcon(getJaguarIcon("Underline")); } jMenuFont.add(jmiUnderline);    jMenuFont.addSeparator();    jMenuFont.add(new JMenuItem(new FormatAction(Lang.rb.getString("FormatBig"), HTML.Tag.BIG)));    jMenuFont.add(new JMenuItem(new FormatAction(Lang.rb.getString("FormatSmall"), HTML.Tag.SMALL)));    jMenuFont.addSeparator();    JMenuItem jmiSupscript = new JMenuItem(new FormatAction(Lang.rb.getString("FormatSuperscript"), HTML.Tag.SUP)); if(showMenuIcons) { jmiSupscript.setIcon(getJaguarIcon("Super")); } jMenuFont.add(jmiSupscript);    JMenuItem jmiSubscript = new JMenuItem(new FormatAction(Lang.rb.getString("FormatSubscript"), HTML.Tag.SUB));   if(showMenuIcons) { jmiSubscript.setIcon(getJaguarIcon("Sub")); }   jMenuFont.add(jmiSubscript);    jMenuFont.addSeparator();    jMenuFont.add(new JMenuItem(new StyledEditorKit.FontFamilyAction(Lang.rb.getString("FontMonospaced"), "Monospaced")));    jMenuFont.add(new JMenuItem(new StyledEditorKit.FontFamilyAction(Lang.rb.getString("FontSansserif"), "SansSerif")));    jMenuFont.add(new JMenuItem(new StyledEditorKit.FontFamilyAction(Lang.rb.getString("FontSerif"), "Serif")));    jMenuFont.addSeparator();    JMenu jMenuFontColor = new JMenu(Lang.rb.getString("Color"));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorAqua"),    new Color(  0,255,255))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorBlack"),   new Color(  0,  0,  0))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorBlue"),    new Color(  0,  0,255))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorFuschia"), new Color(255,  0,255))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorGray"),    new Color(128,128,128))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorGreen"),   new Color(  0,128,  0))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorLime"),    new Color(  0,255,  0))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorMaroon"),  new Color(128,  0,  0))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorNavy"),    new Color(  0,  0,128))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorOlive"),   new Color(128,128,  0))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorPurple"),  new Color(128,  0,128))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorRed"),     new Color(255,  0,  0))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorSilver"),  new Color(192,192,192))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorTeal"),    new Color(  0,128,128))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorWhite"),   new Color(255,255,255))));      jMenuFontColor.add(new JMenuItem(new StyledEditorKit.ForegroundAction(Lang.rb.getString("ColorYellow"),  new Color(255,255,  0))));    jMenuFont.add(jMenuFontColor);    // FORMAT Menu    JMenu jMenuFormat = new JMenu(Lang.rb.getString("Format"));    JMenu jMenuFormatAlign = new JMenu(Lang.rb.getString("Align"));      jMenuFormatAlign.add(new JMenuItem(new StyledEditorKit.AlignmentAction(Lang.rb.getString("AlignLeft"), StyleConstants.ALIGN_LEFT)));      jMenuFormatAlign.add(new JMenuItem(new StyledEditorKit.AlignmentAction(Lang.rb.getString("AlignCenter"), StyleConstants.ALIGN_CENTER)));      jMenuFormatAlign.add(new JMenuItem(new StyledEditorKit.AlignmentAction(Lang.rb.getString("AlignRight"), StyleConstants.ALIGN_RIGHT)));      //jMenuFormatAlign.add(new JMenuItem(new StyledEditorKit.AlignmentAction(Lang.rb.getString("AlignJustified"), StyleConstants.ALIGN_JUSTIFIED)));    jMenuFormat.add(jMenuFormatAlign);    jMenuFormat.addSeparator();    JMenu jMenuFormatHeading = new JMenu(Lang.rb.getString("Heading"));      jMenuFormatHeading.add(new JMenuItem(new FormatAction(Lang.rb.getString("Heading1"), HTML.Tag.H1)));      jMenuFormatHeading.add(new JMenuItem(new FormatAction(Lang.rb.getString("Heading2"), HTML.Tag.H2)));      jMenuFormatHeading.add(new JMenuItem(new FormatAction(Lang.rb.getString("Heading3"), HTML.Tag.H3)));      jMenuFormatHeading.add(new JMenuItem(new FormatAction(Lang.rb.getString("Heading4"), HTML.Tag.H4)));      jMenuFormatHeading.add(new JMenuItem(new FormatAction(Lang.rb.getString("Heading5"), HTML.Tag.H5)));      jMenuFormatHeading.add(new JMenuItem(new FormatAction(Lang.rb.getString("Heading6"), HTML.Tag.H6)));    jMenuFormat.add(jMenuFormatHeading);    jMenuFormat.addSeparator();    JMenuItem jmiUList = new JMenuItem(new FormatAction(Lang.rb.getString("ListUnordered"), HTML.Tag.UL)); if(showMenuIcons) { jmiUList.setIcon(getJaguarIcon("UList")); } jMenuFormat.add(jmiUList);    JMenuItem jmiOList = new JMenuItem(new FormatAction(Lang.rb.getString("ListOrdered"), HTML.Tag.OL));   if(showMenuIcons) { jmiOList.setIcon(getJaguarIcon("OList")); } jMenuFormat.add(jmiOList);    jMenuFormat.add(new JMenuItem(new FormatAction(Lang.rb.getString("ListItem"), HTML.Tag.LI)));    jMenuFormat.addSeparator();    jMenuFormat.add(new JMenuItem(new FormatAction(Lang.rb.getString("FormatBlockquote"), HTML.Tag.BLOCKQUOTE)));    jMenuFormat.add(new JMenuItem(new FormatAction(Lang.rb.getString("FormatPre"), HTML.Tag.PRE)));    jMenuFormat.add(new JMenuItem(new FormatAction(Lang.rb.getString("FormatSpan"), HTML.Tag.SPAN)));    jMenuFormat.addSeparator();    JMenuItem jmiClearStyles = new JMenuItem(new CustomAction(Lang.rb.getString("FormatClear"), new HTML.UnknownTag(""))); if(showMenuIcons) { jmiClearStyles.setIcon(getJaguarIcon("ClearFormat")); }; jMenuFormat.add(jmiClearStyles);    // INSERT Menu    JMenu jMenuInsert      = new JMenu(Lang.rb.getString("Insert"));    jMenuInsert.add(new JMenuItem(new CustomAction(Lang.rb.getString("InsertAnchor") + menuDialog, HTML.Tag.A)));    JMenuItem jmiBreak     = new JMenuItem(Lang.rb.getString("InsertBreak"));              jmiBreak.setActionCommand("insertbreak"); jmiBreak.addActionListener(this); jmiBreak.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, java.awt.Event.SHIFT_MASK, false)); jMenuInsert.add(jmiBreak);    JMenuItem jmiHRule     = new JMenuItem(Lang.rb.getString("InsertHorizontalRule"));     jmiHRule.setActionCommand("inserthrule"); jmiHRule.addActionListener(this); jMenuInsert.add(jmiHRule);    JMenuItem jmiImage     = new JMenuItem(Lang.rb.getString("InsertImage") + menuDialog); jmiImage.setActionCommand("insertimage"); jmiImage.addActionListener(this); jMenuInsert.add(jmiImage);    jMenuInsert.addSeparator();    JMenuItem jmiTable     = new JMenuItem(Lang.rb.getString("InsertTable") + menuDialog); jmiTable.setActionCommand("inserttable");         jmiTable.addActionListener(this);     jMenuInsert.add(jmiTable);    JMenuItem jmiTableRow  = new JMenuItem(Lang.rb.getString("InsertTableRow"));           jmiTableRow.setActionCommand("inserttablerow");   jmiTableRow.addActionListener(this);  jMenuInsert.add(jmiTableRow);    JMenuItem jmiTableCell = new JMenuItem(Lang.rb.getString("InsertTableCell"));          jmiTableCell.setActionCommand("inserttablecell"); jmiTableCell.addActionListener(this); jMenuInsert.add(jmiTableCell);    // SEARCH Menu    JMenu jMenuSearch      = new JMenu(Lang.rb.getString("Search"));    JMenuItem jmiFind      = new JMenuItem(Lang.rb.getString("SearchFind"));      jmiFind.setActionCommand("find");           jmiFind.addActionListener(this);      jmiFind.setAccelerator(KeyStroke.getKeyStroke('F', java.awt.Event.CTRL_MASK, false));      jMenuSearch.add(jmiFind);    JMenuItem jmiFindAgain = new JMenuItem(Lang.rb.getString("SearchFindAgain")); jmiFindAgain.setActionCommand("findagain"); jmiFindAgain.addActionListener(this); jmiFindAgain.setAccelerator(KeyStroke.getKeyStroke('G', java.awt.Event.CTRL_MASK, false)); jMenuSearch.add(jmiFindAgain);    JMenuItem jmiReplace   = new JMenuItem(Lang.rb.getString("SearchReplace"));   jmiReplace.setActionCommand("replace");     jmiReplace.addActionListener(this);   jmiReplace.setAccelerator(KeyStroke.getKeyStroke('R', java.awt.Event.CTRL_MASK, false));   jMenuSearch.add(jmiReplace);    // HELP Menu    //JMenu jMenuHelp = new JMenu(Lang.rb.getString("Help"));    // Create menubar and add menus    jMenuBar = new JMenuBar();    jMenuBar.add(jMenuFile);    jMenuBar.add(jMenuEdit);    jMenuBar.add(jMenuView);    jMenuBar.add(jMenuFormat);    jMenuBar.add(jMenuFont);    jMenuBar.add(jMenuSearch);    jMenuBar.add(jMenuInsert);    //jMenuBar.add(jMenuHelp);    // DEBUG Menu (optional)    if(debugMode)    {      JMenu jMenuDebug     = new JMenu(Lang.rb.getString("Debug"));      JMenuItem jmiDesc    = new JMenuItem(Lang.rb.getString("DescribeDoc")); jmiDesc.setActionCommand("describe");       jmiDesc.addActionListener(this);    jMenuDebug.add(jmiDesc);      JMenuItem jmiDescCSS = new JMenuItem(Lang.rb.getString("DescribeCSS")); jmiDescCSS.setActionCommand("describecss"); jmiDescCSS.addActionListener(this); jMenuDebug.add(jmiDescCSS);      JMenuItem jmiTag     = new JMenuItem(Lang.rb.getString("WhatTags"));    jmiTag.setActionCommand("whattags");        jmiTag.addActionListener(this);     jMenuDebug.add(jmiTag);      jMenuBar.add(jMenuDebug);    }    */    // Marcin: change from frame to panel    //this.setJMenuBar(jMenuBar);    //GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();    //m_fontNames = ge.getAvailableFontFamilyNames();    m_fontNames = new String[] { "Font", "Arial", "Arial Black", "Arial Narrow", "Comic Sans MS", "Curier New", "System", "Times New Roman", "Verdana", "Wingdings" };    //m_fontSizes = new String[] { "xx-small", "small", "medium", "large", "x-large", "xx-large", "300%" };    //m_fontSizes = new String[] {"6", "8", "10", "12", "14", "18", "24", "36" };    m_fontSizes = new String[] { "Size", "1", "2", "3", "4", "5", "6", "7" };    // Create the toolbars    jToolBar = new JToolBar(SwingConstants.HORIZONTAL);    jToolBar.setFloatable(false);    jTopToolBar = new JToolBar(SwingConstants.HORIZONTAL);    jTopToolBar.setFloatable(false);    // Style    m_cbStyles = new JComboBox(STYLES[1]);    //m_cbStyles.setBorder(new EmptyBorder(2,2,2,2));    //m_cbStyles = new JComboBox(new StyleComboBoxModel(STYLES));    //m_cbStyles.setRenderer(new ComboBoxRenderer());    //m_cbStyles.setMaximumSize(m_cbStyles.getMinimumSize());    Dimension dimStyle = new Dimension(140, m_cbStyles.getMinimumSize().height);    m_cbStyles.setMaximumSize(dimStyle);    m_cbStyles.setPreferredSize(dimStyle);    m_cbStyles.setRequestFocusEnabled(false);    m_cbStyles.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (m_skipUpdate)          return;        int index = m_cbStyles.getSelectedIndex();        if (index >= 0 && index < STYLES[0].length) {          HTML.Tag style = (HTML.Tag)STYLES[0][index];          if (style != null) {            MutableAttributeSet attr = new SimpleAttributeSet();            attr.addAttribute(StyleConstants.NameAttribute, style);            htmlDoc.startUndoableSequence();            setAttributeSet(attr, true, false);            refreshOnUpdate();            htmlDoc.endUndoableSequence();          }        }        /*        if (index >= 0 && index < STYLES[0].length) {          HTML.Tag style = (HTML.Tag)STYLES[0][index];          if (style != null) {            MutableAttributeSet attr = new SimpleAttributeSet();            attr.addAttribute(StyleConstants.NameAttribute, style);            htmlDoc.startUndoableSequence();            setAttributeSet(attr, true, false);            refreshOnUpdate();            htmlDoc.endUndoableSequence();          }        }         */        jtpMain.grabFocus();      }    });    jTopToolBar.add(m_cbStyles);    // Font    addSeparator(jTopToolBar);    //jTopToolBar.addSeparator();    m_cbFonts = new JComboBox(m_fontNames);    //m_cbFonts.setBorder(new EmptyBorder(2,2,2,2));    m_cbFonts.setMaximumSize(m_cbFonts.getMinimumSize());    Dimension dimFont = new Dimension(180, m_cbFonts.getMinimumSize().height);    m_cbFonts.setMaximumSize(dimFont);    m_cbFonts.setPreferredSize(dimFont);    m_cbFonts.setRequestFocusEnabled(false);    m_cbFonts.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (m_skipUpdate)          return;        String font = m_cbFonts.getSelectedItem().toString();        if (!font.equals("Font")) {          m_fontName = font;          MutableAttributeSet attr = new SimpleAttributeSet();          StyleConstants.setFontFamily(attr, m_fontName);          setAttributeSet(attr);        }        jtpMain.grabFocus();      }    });    jTopToolBar.add(m_cbFonts);    // Size    /*    jTopToolBar.addSeparator();    m_cbSizes = new JComboBox(m_fontSizes);    //m_cbSizes.setMaximumSize(m_cbSizes.getMinimumSize());    Dimension dimSize = new Dimension(60, m_cbSizes.getMinimumSize().height);    m_cbSizes.setMaximumSize(dimSize);    m_cbSizes.setPreferredSize(dimSize);    m_cbSizes.setRequestFocusEnabled(false);    m_cbSizes.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        int fontSize = 0;        try {          fontSize = m_cbSizes.getSelectedIndex();        } catch (NumberFormatException ex) {        } catch (Throwable t) {        }        if (fontSize > 0) {          htmlDoc.startUndoableSequence();          m_fontSize = fontSize;          MutableAttributeSet attr = new SimpleAttributeSet();          StyleConstants.setFontSize(attr, fontSize);          JTextPane pane = getTextPane();          int iStart = pane.getSelectionStart();          int iEnd = pane.getSelectionEnd();          if (iStart == iEnd) {            MutableAttributeSet masAttribs = htmlKit.getInputAttributes();            masAttribs.addAttributes(attr);            ActionEvent actionEvent = new ActionEvent(pane, 0, " " + fontSize);            new DefaultEditorKit.InsertContentAction().actionPerformed(actionEvent);          } else {            setAttributeSet(attr);          }          htmlDoc.endUndoableSequence();        }        m_cbSizes.setSelectedIndex(0);        refreshOnUpdate();        jtpMain.grabFocus();      }    });    jTopToolBar.add(m_cbSizes);*/    // Find and Replace Dialog    addSeparator(jTopToolBar);    //jTopToolBar.addSeparator();    JButtonNoFocus jbtnFind = new JButtonNoFocus(getJaguarIcon("Find"));    jbtnFind.setBorder(new EmptyBorder(4,4,4,4));    //jbtnFind.setSize(new Dimension(22, 22));    jbtnFind.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (m_findDialog == null) {          Window w = SwingUtilities.windowForComponent(Jaguar.this);          if (w instanceof Dialog)            m_findDialog = new FindDialog((Dialog) w, Jaguar.this, 0);          else if (w instanceof Frame)            m_findDialog = new FindDialog((Frame) w, Jaguar.this, 0);        } else {          m_findDialog.setSelectedIndex(0);        }        m_findDialog.setVisible(true);      }    });    jbtnFind.setToolTipText("Find and Replace");    jTopToolBar.add(jbtnFind);    JButtonNoFocus jbtnClearFormat = new JButtonNoFocus(new CustomAction("Clear Format", new HTML.UnknownTag("")));    jbtnClearFormat.setBorder(new EmptyBorder(4,4,4,4));    //jbtnClearFormat.setSize(new Dimension(22, 22));    jbtnClearFormat.setIcon(getJaguarIcon("ClearFormat"));    jbtnClearFormat.setText(null);    jbtnClearFormat.setToolTipText(Lang.rb.getString("FormatClear"));    jTopToolBar.add(jbtnClearFormat);    jtbtnViewSource = new JToggleButtonNoFocus(getJaguarIcon("Source"));    jtbtnViewSource.setBorder(new EmptyBorder(4,4,4,4));    //jtbtnViewSource.setSize(new Dimension(22, 22));    jtbtnViewSource.setText(null);    jtbtnViewSource.setToolTipText(Lang.rb.getString("ViewSource"));    jtbtnViewSource.setActionCommand("viewsource");    jtbtnViewSource.addActionListener(this);    jTopToolBar.add(jtbtnViewSource);    // Font Dialog    /*    JButtonNoFocus jbtnFont = new JButtonNoFocus(getJaguarIcon("Font"));    jbtnFont.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        FontDialog dlg = null;        Window w = SwingUtilities.windowForComponent(Jaguar.this);        if (w instanceof Dialog) {          dlg = new FontDialog((Dialog) w, m_fontNames, m_fontSizes);        } else if (w instanceof Frame) {          dlg = new FontDialog((Frame) w, m_fontNames, m_fontSizes);        }        int caretPos = jtpMain.getCaretPosition();        if (caretPos > 0)          caretPos --;        AttributeSet a = htmlDoc.getCharacterElement(caretPos).getAttributes();        dlg.setAttributes(a);        dlg.pack();        dlg.setVisible(true);        if (dlg.succeeded()) {          setAttributeSet(dlg.getAttributes());          showAttributes();        }      }    });    jToolBar.add(jbtnFont);     */    jtbtnBold = new JToggleButtonNoFocus(new StyledEditorKit.BoldAction());    jtbtnBold.setBorder(new EmptyBorder(4,4,4,4));    //jtbtnBold.setSize(new Dimension(22, 22));    jtbtnBold.setIcon(getJaguarIcon("Bold"));    jtbtnBold.setText(null);    jtbtnBold.setToolTipText(Lang.rb.getString("FontBold"));    jToolBar.add(jtbtnBold);    jtbtnItalic = new JToggleButtonNoFocus(new StyledEditorKit.ItalicAction());    jtbtnItalic.setBorder(new EmptyBorder(4,4,4,4));    //jtbtnItalic.setSize(new Dimension(22, 22));    jtbtnItalic.setIcon(getJaguarIcon("Italic"));    jtbtnItalic.setText(null);    jtbtnItalic.setToolTipText(Lang.rb.getString("FontItalic"));    jToolBar.add(jtbtnItalic);    jtbtnUnderline = new JToggleButtonNoFocus(new StyledEditorKit.UnderlineAction());    jtbtnUnderline.setBorder(new EmptyBorder(4,4,4,4));    //jtbtnUnderline.setSize(new Dimension(22, 22));    jtbtnUnderline.setIcon(getJaguarIcon("Underline"));    jtbtnUnderline.setText(null);    jtbtnUnderline.setToolTipText(Lang.rb.getString("FontUnderline"));    jToolBar.add(jtbtnUnderline);    //jToolBar.addSeparator();    addSeparator(jToolBar);    JButtonNoFocus jbtnBig = new JButtonNoFocus(new FormatAction(Lang.rb.getString("FormatBig"), HTML.Tag.BIG));    jbtnBig.setBorder(new EmptyBorder(4,4,4,4));    //jbtnBig.setSize(new Dimension(22, 22));    jbtnBig.setIcon(getJaguarIcon("FontBig"));    jbtnBig.setText(null);    jbtnBig.setToolTipText(Lang.rb.getString("FormatBig"));    jToolBar.add(jbtnBig);    JButtonNoFocus jbtnSmall = new JButtonNoFocus(new FormatAction(Lang.rb.getString("FormatSmall"), HTML.Tag.SMALL));    jbtnSmall.setBorder(new EmptyBorder(4,4,4,4));    //jbtnSmall.setSize(new Dimension(22, 22));    jbtnSmall.setIcon(getJaguarIcon("FontSmall"));    jbtnSmall.setText(null);    jbtnSmall.setToolTipText(Lang.rb.getString("FormatSmall"));    jToolBar.add(jbtnSmall);    //jToolBar.addSeparator();    addSeparator(jToolBar);    JButtonNoFocus jbtnColorBack = new JButtonNoFocus();    jbtnColorBack.setBorder(new EmptyBorder(4,4,4,4));    //jbtnColorBack.setSize(new Dimension(22, 22));    jbtnColorBack.setActionCommand("colorBack");    jbtnColorBack.setIcon(getJaguarIcon("ColorBack"));    jbtnColorBack.setText(null);    jbtnColorBack.setToolTipText(Lang.rb.getString("ChooseBackgroundColor"));    jbtnColorBack.addActionListener(this);    jToolBar.add(jbtnColorBack);    JButtonNoFocus jbtnColorFont = new JButtonNoFocus();    jbtnColorFont.setBorder(new EmptyBorder(4,4,4,4));    //jbtnColorFont.setSize(new Dimension(22, 22));    jbtnColorFont.setActionCommand("colorFont");    jbtnColorFont.setIcon(getJaguarIcon("ColorFont"));    jbtnColorFont.setText(null);    jbtnColorFont.setToolTipText(Lang.rb.getString("ChooseFontColor"));    jbtnColorFont.addActionListener(this);    jToolBar.add(jbtnColorFont);    //JButtonNoFocus jbtnColorFontB = new JButtonNoFocus(); jbtnColorFontB.setActionCommand("colorFontBack");   jbtnColorFontB.setIcon(getJaguarIcon("ColorFont"));     jbtnColorFontB.setText(null);   jbtnColorFontB.setToolTipText(Lang.rb.getString("ChooseFontColor"));        jToolBar.add(jbtnColorFontB);   jbtnColorFontB.addActionListener(this);    //jToolBar.addSeparator();    addSeparator(jToolBar);    JButtonNoFocus jbtnAlignLeft = new JButtonNoFocus(new StyledEditorKit.AlignmentAction(Lang.rb.getString("AlignLeft"), StyleConstants.ALIGN_LEFT));    jbtnAlignLeft.setBorder(new EmptyBorder(4,4,4,4));    //jbtnAlignLeft.setSize(new Dimension(22, 22));    jbtnAlignLeft.setIcon(getJaguarIcon("AlignLeft"));    jbtnAlignLeft.setText(null);    jbtnAlignLeft.setToolTipText(Lang.rb.getString("AlignLeft"));    jToolBar.add(jbtnAlignLeft);    JButtonNoFocus jbtnAlignCenter = new JButtonNoFocus(new StyledEditorKit.AlignmentAction(Lang.rb.getString("AlignCenter"), StyleConstants.ALIGN_CENTER));    jbtnAlignCenter.setBorder(new EmptyBorder(4,4,4,4));    //jbtnAlignCenter.setSize(new Dimension(22, 22));    jbtnAlignCenter.setIcon(getJaguarIcon("AlignCenter"));    jbtnAlignCenter.setText(null);    jbtnAlignCenter.setToolTipText(Lang.rb.getString("AlignCenter"));    jToolBar.add(jbtnAlignCenter);    JButtonNoFocus jbtnAlignRight = new JButtonNoFocus(new StyledEditorKit.AlignmentAction(Lang.rb.getString("AlignRight"), StyleConstants.ALIGN_RIGHT));    jbtnAlignRight.setBorder(new EmptyBorder(4,4,4,4));    //jbtnAlignRight.setSize(new Dimension(22, 22));    jbtnAlignRight.setIcon(getJaguarIcon("AlignRight"));    jbtnAlignRight.setText(null);    jbtnAlignRight.setToolTipText(Lang.rb.getString("AlignRight"));    jToolBar.add(jbtnAlignRight);    //jToolBar.addSeparator();    addSeparator(jToolBar);    JButtonNoFocus jbtnUList = new JButtonNoFocus(new ListAutomationAction(Lang.rb.getString("ListUnordered"), HTML.Tag.UL));    jbtnUList.setBorder(new EmptyBorder(4,4,4,4));    //jbtnUList.setSize(new Dimension(22, 22));    jbtnUList.setIcon(getJaguarIcon("UList"));    jbtnUList.setText(null);    jbtnUList.setToolTipText(Lang.rb.getString("ListUnordered"));    jToolBar.add(jbtnUList);    JButtonNoFocus jbtnOList = new JButtonNoFocus(new ListAutomationAction(Lang.rb.getString("ListOrdered"), HTML.Tag.OL));    jbtnOList.setBorder(new EmptyBorder(4,4,4,4));    //jbtnOList.setSize(new Dimension(22, 22));    jbtnOList.setIcon(getJaguarIcon("OList"));    jbtnOList.setText(null);    jbtnOList.setToolTipText(Lang.rb.getString("ListOrdered"));    jToolBar.add(jbtnOList);    //jToolBar.addSeparator();    JButtonNoFocus jbtnInsertHR = new JButtonNoFocus();    jbtnInsertHR.setBorder(new EmptyBorder(4,4,4,4));    //jbtnInsertHR.setSize(new Dimension(22, 22));    jbtnInsertHR.setActionCommand("inserthrule");    jbtnInsertHR.setIcon(getJaguarIcon("HorizontalLine"));    jbtnInsertHR.setText(null);    jbtnInsertHR.setToolTipText(Lang.rb.getString("InsertHorizontalRule"));    jbtnInsertHR.addActionListener(this);    jToolBar.add(jbtnInsertHR);    JButtonNoFocus jbtnAnchor = new JButtonNoFocus(new CustomAction("Link", HTML.Tag.A));    jbtnAnchor.setBorder(new EmptyBorder(4,4,4,4));    //jbtnAnchor.setSize(new Dimension(22, 22));    jbtnAnchor.setIcon(getJaguarIcon("Anchor"));    jbtnAnchor.setText(null);    jbtnAnchor.setToolTipText(Lang.rb.getString("ToolAnchor"));    jToolBar.add(jbtnAnchor);    //jToolBar.addSeparator();    addSeparator(jToolBar);    JButtonNoFocus jbtnImages = new JButtonNoFocus();    jbtnImages.setBorder(new EmptyBorder(4,4,4,4));    //jbtnImages.setSize(new Dimension(22, 22));    jbtnImages.setActionCommand("insertimage");    jbtnImages.setIcon(getJaguarIcon("Images"));    jbtnImages.setText(null);    jbtnImages.setToolTipText(Lang.rb.getString("InsertImage"));    jbtnImages.addActionListener(this);    jToolBar.add(jbtnImages);    //jToolBar.addSeparator();    addSeparator(jToolBar);    // Marcin: no new/open/save on toolbar    //JButtonNoFocus jbtnNewHTML  = new JButtonNoFocus(getJaguarIcon("New"));  jbtnNewHTML.setToolTipText(Lang.rb.getString("NewDocument"));   jbtnNewHTML.setActionCommand("newdoc");    jbtnNewHTML.addActionListener(this);  jToolBar.add(jbtnNewHTML);    //JButtonNoFocus jbtnOpenHTML = new JButtonNoFocus(getJaguarIcon("Open")); jbtnOpenHTML.setToolTipText(Lang.rb.getString("OpenDocument")); jbtnOpenHTML.setActionCommand("openhtml"); jbtnOpenHTML.addActionListener(this); jToolBar.add(jbtnOpenHTML);    //JButtonNoFocus jbtnSaveHTML = new JButtonNoFocus(getJaguarIcon("Save")); jbtnSaveHTML.setToolTipText(Lang.rb.getString("SaveDocument")); jbtnSaveHTML.setActionCommand("saveas");   jbtnSaveHTML.addActionListener(this); jToolBar.add(jbtnSaveHTML);    //jToolBar.addSeparator();    // Marcin: remove basic cut/copy/paste as they are doubled here    //JButtonNoFocus jbtnCut   = new JButtonNoFocus(new DefaultEditorKit.CutAction());   jbtnCut.setIcon(getJaguarIcon("Cut"));     jbtnCut.setText(null);   jbtnCut.setToolTipText(Lang.rb.getString("Cut"));     jToolBar.add(jbtnCut);    //JButtonNoFocus jbtnCopy  = new JButtonNoFocus(new DefaultEditorKit.CopyAction());  jbtnCopy.setIcon(getJaguarIcon("Copy"));   jbtnCopy.setText(null);  jbtnCopy.setToolTipText(Lang.rb.getString("Copy"));   jToolBar.add(jbtnCopy);    //JButtonNoFocus jbtnPaste = new JButtonNoFocus(new DefaultEditorKit.PasteAction()); jbtnPaste.setIcon(getJaguarIcon("Paste")); jbtnPaste.setText(null); jbtnPaste.setToolTipText(Lang.rb.getString("Paste")); jToolBar.add(jbtnPaste);    //JButtonNoFocus jbtnSubscript   = new JButtonNoFocus(new FormatAction("Subscript", HTML.Tag.SUB));           jbtnSubscript.setIcon(getJaguarIcon("Sub"));            jbtnSubscript.setText(null);      jbtnSubscript.setToolTipText(Lang.rb.getString("FormatSubscript"));       jToolBar.add(jbtnSubscript);    //jtbtnSuperscript  = new JToggleButtonNoFocus(new SuperscriptAction("Superscript"));     jtbtnSuperscript.setIcon(getJaguarIcon("Super"));     jtbtnSuperscript.setText(null);   jtbtnSuperscript.setToolTipText(Lang.rb.getString("FormatSuperscript"));  jToolBar.add(jtbtnSuperscript);    //jtbtnSubscript    = new JToggleButtonNoFocus(new SubscriptAction("Subscript"));         jtbtnSubscript.setIcon(getJaguarIcon("Sub"));         jtbtnSubscript.setText(null);     jtbtnSubscript.setToolTipText(Lang.rb.getString("FormatSubscript"));      jToolBar.add(jtbtnSubscript);    //JButtonNoFocus jbtnUList       = new JButtonNoFocus((Action)naturalActions.get("InsertUnorderedListItem"));  jbtnUList.setIcon(getJaguarIcon("UList"));             jbtnUList.setText(null);       jbtnUList.setToolTipText(Lang.rb.getString("ListUnordered"));           jToolBar.add(jbtnUList);    //JButtonNoFocus jbtnOList       = new JButtonNoFocus((Action)naturalActions.get("InsertOrderedListItem"));    jbtnOList.setIcon(getJaguarIcon("OList"));             jbtnOList.setText(null);       jbtnOList.setToolTipText(Lang.rb.getString("ListUnordered"));           jToolBar.add(jbtnOList);    //JButtonNoFocus jbtnIndentLeft  = new JButtonNoFocus(new IndentLeftAction("IndentLeft"));                                              jbtnIndentLeft.setIcon(getJaguarIcon("IndentLeft"));        jbtnIndentLeft.setText(null);   jbtnIndentLeft.setToolTipText("Indent Left");       jToolBar.add(jbtnIndentLeft);    //JButtonNoFocus jbtnIndentRight = new JButtonNoFocus(new IndentRightAction("IndentRight"));                                            jbtnIndentRight.setIcon(getJaguarIcon("IndentRight"));      jbtnIndentRight.setText(null);  jbtnIndentRight.setToolTipText("Indent Right");     jToolBar.add(jbtnIndentRight);    //jToolBar.addSeparator();    //jcmbStyleSelector = new JComboBoxNoFocus(); jToolBar.add(jcmbStyleSelector); jcmbStyleSelector.setAction(new StylesAction());    JToggleButtonNoFocus jbtnAdvanced = new JToggleButtonNoFocus();    jbtnAdvanced.setBorder(new EmptyBorder(4,4,4,4));    //jbtnAdvanced.setSize(new Dimension(22, 22));    jbtnAdvanced.setActionCommand("Advanced");    jbtnAdvanced.setIcon(getJaguarIcon("Advanced"));    jbtnAdvanced.setText(null);    jbtnAdvanced.setToolTipText("Show advanced options.");    jbtnAdvanced.addActionListener(this);    jToolBar.add(jbtnAdvanced);    jTopToolBar.setVisible(showToolBar);    jToolBar.setVisible(showToolBar);    /* Create the scroll area for the text pane */    jspMain = new JScrollPane(jtpMain);    jspMain.setMinimumSize(new Dimension(32, 32));    /* Create the scroll area for the source viewer */    jspSource = new JScrollPane(jtpSource);    jspSource.setMinimumSize(new Dimension(32, 32));    //jspltDisplay = new JSplitPane(JSplitPane.VERTICAL_SPLIT, jspMain, (showViewSource ? jspSource : null));    //jspltDisplay.setDividerSize(5);    //iSplitPos = jspltDisplay.getDividerLocation();    jMainEditorContainer = new JPanel();    jMainEditorContainer.setLayout(new BorderLayout());    jMainEditorContainer.add(jspMain, BorderLayout.CENTER);    registerDocumentStyles();    JPanel innerToolBarPanel = new JPanel();    innerToolBarPanel.setLayout(new BorderLayout());    innerToolBarPanel.add(jToolBar, BorderLayout.NORTH);    //innerToolBarPanel.add(jspltDisplay, BorderLayout.CENTER);    innerToolBarPanel.add(jMainEditorContainer, BorderLayout.CENTER);    JPanel outerToolBarPanel = new JPanel();    outerToolBarPanel.setLayout(new BorderLayout());    outerToolBarPanel.add(jTopToolBar, BorderLayout.NORTH);    outerToolBarPanel.add(innerToolBarPanel, BorderLayout.CENTER);    this.setLayout(new BorderLayout());    if (jMenuBar != null)      this.add(jMenuBar, BorderLayout.NORTH);    this.add(outerToolBarPanel, BorderLayout.CENTER);    // initially hide the top portion of the toolbar    jTopToolBar.setVisible(false);    this.updateTitle();    com.CH_co.util.HTML_ClickablePane.setBaseToDefault(htmlDoc);    jtpMain.requestFocus();    showAttributes();  }  /** Common Constructor    * @param sDocument         [String]  A text or HTML document to load in the editor upon startup.    * @param sStyleSheet       [String]  A CSS stylesheet to load in the editor upon startup.    * @param showToolBar       [boolean] Specifies whether the app should include the toolbar.    * @param showViewSource    [boolean] Specifies whether or not to show the View Source window on startup.    * @param showMenuIcons     [boolean] Specifies whether or not to show icon pictures in menus.    * @param editModeExclusive [boolean] Specifies whether or not to use exclusive edit mode (recommended on).    * @param sLanguage         [String]  The language portion of the Internationalization Locale to run Jaguar in.    * @param sCountry          [String]  The country portion of the Internationalization Locale to run Jaguar in.    */  public Jaguar(String sDocument, String sStyleSheet, boolean showToolBar, boolean showViewSource, boolean showMenuIcons, boolean editModeExclusive, String sLanguage, String sCountry)  {    this(sDocument, sStyleSheet, null, showToolBar, showViewSource, showMenuIcons, editModeExclusive, sLanguage, sCountry, false);  }  /** Default Language Constructor    * @param sDocument         [String]  A text or HTML document to load in the editor upon startup.    * @param sStyleSheet       [String]  A CSS stylesheet to load in the editor upon startup.    * @param showToolBar       [boolean] Specifies whether the app should include the toolbar.    * @param showViewSource    [boolean] Specifies whether or not to show the View Source window on startup.    * @param showMenuIcons     [boolean] Specifies whether or not to show icon pictures in menus.    * @param editModeExclusive [boolean] Specifies whether or not to use exclusive edit mode (recommended on).    */  public Jaguar(String sDocument, String sStyleSheet, boolean showToolBar, boolean showViewSource, boolean showMenuIcons, boolean editModeExclusive)  {    this(sDocument, sStyleSheet, null, showToolBar, showViewSource, showMenuIcons, editModeExclusive, null, null, false);  }  /** Raw Document Constructor    * @param sRawDocument      [String]  A document encoded as a String to load in the editor upon startup.    * @param showToolBar       [boolean] Specifies whether the app should include the toolbar.    * @param showViewSource    [boolean] Specifies whether or not to show the View Source window on startup.    * @param showMenuIcons     [boolean] Specifies whether or not to show icon pictures in menus.    * @param editModeExclusive [boolean] Specifies whether or not to use exclusive edit mode (recommended on).    * @param sLanguage         [String]  The language portion of the Internationalization Locale to run Jaguar in.    * @param sCountry          [String]  The country portion of the Internationalization Locale to run Jaguar in.    */  public Jaguar(String sRawDocument, boolean showToolBar, boolean showViewSource, boolean showMenuIcons, boolean editModeExclusive, String sLanguage, String sCountry)  {    this(null, null, sRawDocument, showToolBar, showViewSource, showMenuIcons, editModeExclusive, sLanguage, sCountry, false);  }  /** Default Language & Raw Document Constructor    * @param sRawDocument      [String]  A document encoded as a String to load in the editor upon startup.    * @param showToolBar       [boolean] Specifies whether the app should include the toolbar.    * @param showViewSource    [boolean] Specifies whether or not to show the View Source window on startup.    * @param showMenuIcons     [boolean] Specifies whether or not to show icon pictures in menus.    * @param editModeExclusive [boolean] Specifies whether or not to use exclusive edit mode (recommended on).    */  public Jaguar(String sRawDocument, boolean showToolBar, boolean showViewSource, boolean showMenuIcons, boolean editModeExclusive)  {    this(null, null, sRawDocument, showToolBar, showViewSource, showMenuIcons, editModeExclusive, null, null, false);  }  /** Flags & Language Constructor    * @param showToolBar       [boolean] Specifies whether the app should include the toolbar.    * @param showViewSource    [boolean] Specifies whether or not to show the View Source window on startup.    * @param showMenuIcons     [boolean] Specifies whether or not to show icon pictures in menus.    * @param editModeExclusive [boolean] Specifies whether or not to use exclusive edit mode (recommended on).    * @param sLanguage         [String]  The language portion of the Internationalization Locale to run Jaguar in.    * @param sCountry          [String]  The country portion of the Internationalization Locale to run Jaguar in.    */  public Jaguar(boolean showToolBar, boolean showViewSource, boolean showMenuIcons, boolean editModeExclusive, String sLanguage, String sCountry)  {    this(null, null, null, showToolBar, showViewSource, showMenuIcons, editModeExclusive, sLanguage, sCountry, false);  }  /** Flags Constructor    * @param showToolBar       [boolean] Specifies whether the app should include the toolbar.    * @param showViewSource    [boolean] Specifies whether or not to show the View Source window on startup.    * @param showMenuIcons     [boolean] Specifies whether or not to show icon pictures in menus.    * @param editModeExclusive [boolean] Specifies whether or not to use exclusive edit mode (recommended on).    */  public Jaguar(boolean showToolBar, boolean showViewSource, boolean showMenuIcons, boolean editModeExclusive)  {    this(null, null, null, showToolBar, showViewSource, showMenuIcons, editModeExclusive, null, null, false);  }  /** Language & Debug Constructor    * @param sLanguage [String]  The language portion of the Internationalization Locale to run Jaguar in.    * @param sCountry  [String]  The country portion of the Internationalization Locale to run Jaguar in.    * @param debugMode [boolean] Specifies whether to show the Debug menu or not.    */  public Jaguar(String sLanguage, String sCountry, boolean debugMode)  {    this(null, null, null, true, false, true, true, sLanguage, sCountry, debugMode);  }  /** Language Constructor    * @param sLanguage [String]  The language portion of the Internationalization Locale to run Jaguar in.    * @param sCountry  [String]  The country portion of the Internationalization Locale to run Jaguar in.    */  public Jaguar(String sLanguage, String sCountry)  {    this(null, null, null, true, false, true, true, sLanguage, sCountry, false);  }  /** Debug Constructor    * @param debugMode [boolean] Specifies whether to show the Debug menu or not.    */  public Jaguar(boolean debugMode)  {    this(null, null, null, true, false, true, true, null, null, debugMode);  }  /** Empty Constructor    */  public Jaguar()  {    this(null, null, null, true, false, true, true, null, null, false);  }  /* WindowListener methods */  public void windowClosing(WindowEvent we)  {    // Marcin: change from frame to panel    /*    this.dispose();    System.exit(0);     */  }  public void windowOpened(WindowEvent we)      { }  public void windowClosed(WindowEvent we)      { }  public void windowActivated(WindowEvent we)   { }  public void windowDeactivated(WindowEvent we) { }  public void windowIconified(WindowEvent we)   { }  public void windowDeiconified(WindowEvent we) { }  /* ActionListener method */  public void actionPerformed(ActionEvent ae) {    try {      String command = ae.getActionCommand();      if (command.equals("Advanced")) {        jTopToolBar.setVisible(!jTopToolBar.isVisible());        revalidate();      }      else if (command.equals("newdoc")) {        if(styleSheet != null) {          htmlDoc = new MutableHTMLDocument(styleSheet);        } else {          htmlDoc = (MutableHTMLDocument)(htmlKit.createDefaultDocument());        }        jtpMain.setText("<HTML><BODY face='Arial, Verdana, Helvetica, sans-serif'><p></p></BODY></HTML>");        jtpSource.setText("<HTML><BODY face='Arial, Verdana, Helvetica, sans-serif'><p></p></BODY></HTML>");        registerDocument(htmlDoc);        currentFile = null;        updateTitle();      }      else if(command.equals("save")) {        writeOut((HTMLDocument)(jtpMain.getDocument()), currentFile);        updateTitle();      } else if(command.equals("saveas")) {        writeOut((HTMLDocument)(jtpMain.getDocument()), null);      } else if(command.equals("savebody")) {        writeOutFragment((HTMLDocument)(jtpMain.getDocument()),"body");      } else if(command.equals("savertf")) {        writeOutRTF((StyledDocument)(jtpMain.getStyledDocument()));      } else if(command.equals("openhtml")) {        openDocument(null);      } else if(command.equals("opencss")) {        openStyleSheet(null);      } else if(command.equals("describe")) {        System.out.println("------------DOCUMENT------------");        System.out.println("Content Type : " + jtpMain.getContentType());        System.out.println("Editor Kit   : " + jtpMain.getEditorKit());        System.out.println("Doc Tree     :");        System.out.println("");        describeDocument(jtpMain.getStyledDocument());        System.out.println("--------------------------------");        System.out.println("");      } else if(command.equals("describecss")) {        System.out.println("-----------STYLESHEET-----------");        System.out.println("Stylesheet Rules");          java.util.Enumeration rules = styleSheet.getStyleNames();          while(rules.hasMoreElements())          {            String ruleName = (String)(rules.nextElement());            Style styleRule = styleSheet.getStyle(ruleName);            System.out.println(styleRule.toString());        }        System.out.println("--------------------------------");        System.out.println("");      } else if(command.equals("whattags")) {        System.out.println("Caret Position : " + jtpMain.getCaretPosition());        AttributeSet attribSet = jtpMain.getCharacterAttributes();        java.util.Enumeration attribs = attribSet.getAttributeNames();        System.out.println("Attributes     : ");        while(attribs.hasMoreElements()) {          String attribName = attribs.nextElement().toString();          System.out.println("                 " + attribName + " | " + attribSet.getAttribute(attribName));        }      } else if(command.equals("toggletoolbar")) {        jToolBar.setVisible(jcbmiViewToolbar.isSelected());      } else if(command.equals("viewsource")) {        toggleSourceWindow();      } else if(command.equals("serialize")) {        serializeOut((HTMLDocument)(jtpMain.getDocument()));      } else if(command.equals("readfromser")) {        serializeIn();      } else if (command.equals("colorFont")) {        colorFont(ae);      } else if (command.equals("colorFontBack")) {        colorFontBack(ae);      } else if (command.equals("colorBack")) {        colorBack(ae);      } else if(command.equals("inserttable")) {        insertTable();      } else if(command.equals("inserttablerow")) {        insertTableRow(4);      } else if(command.equals("inserttablecell")) {        insertTableCell();      } else if(command.equals("insertbreak")) {        insertBreak();      } else if(command.equals("inserthrule")) {        insertHRule();      } else if(command.equals("insertimage")) {        insertImage(ae);      } else if(command.equals("find")) {        if(!(jspSource.isShowing())) { toggleSourceWindow(); jtpSource.setCaretPosition(0); }        jtpSource.requestFocus();        doSearch((String)null, (String)null, false, lastSearchCaseSetting, lastSearchTopSetting);      } else if(command.equals("findagain")) {        if(!(jspSource.isShowing())) { toggleSourceWindow(); jtpSource.setCaretPosition(0); }        jtpSource.requestFocus();        doSearch(lastSearchFindTerm, (String)null, false, lastSearchCaseSetting, false);      } else if(command.equals("replace")) {        if(!(jspSource.isShowing())) { toggleSourceWindow(); jtpSource.setCaretPosition(0); }        jtpSource.requestFocus();        doSearch((String)null, (String)null, true, lastSearchCaseSetting, lastSearchTopSetting);      } else if(command.equals("exit")) {        // Marcin: change from frame to panel        /*        this.dispose();        System.exit(0);         */      }    } catch(IOException ioe) {      logException("IOException in actionPerformed method", ioe);    } catch(BadLocationException ble) {      logException("BadLocationException in actionPerformed method", ble);    } catch(ClassNotFoundException cnfe) {      logException("ClassNotFound Exception in actionPerformed method", cnfe);    } catch(RuntimeException re) {      logException("RuntimeException in actionPerformed method", re);    }  }  /* DocumentListener methods */  public void changedUpdate(DocumentEvent de)	{ handleDocumentChange(de); }  public void insertUpdate(DocumentEvent de)	{ handleDocumentChange(de); }  public void removeUpdate(DocumentEvent de)	{ handleDocumentChange(de); }  public void handleDocumentChange(DocumentEvent de) {    if (!exclusiveEdit) {      if (jspSource.isShowing()) {        if (de.getDocument() instanceof HTMLDocument) {          jtpSource.getDocument().removeDocumentListener(this);          jtpSource.setText(jtpMain.getText());          jtpSource.getDocument().addDocumentListener(this);        } else if(de.getDocument() instanceof PlainDocument || de.getDocument() instanceof DefaultStyledDocument) {          jtpMain.getDocument().removeDocumentListener(this);          jtpMain.setText(jtpSource.getText());          jtpMain.getDocument().addDocumentListener(this);        }      }    }  }  /** Method for setting a document as the current document for the text pane    * and re-registering the controls and settings for it    */  public void registerDocument(HTMLDocument htmlDoc)  {    jtpMain.setDocument(htmlDoc);    jtpMain.getDocument().addUndoableEditListener(new CustomUndoableEditListener());    jtpMain.getDocument().addDocumentListener(this);    purgeUndos();    registerDocumentStyles();  }  /** Method for locating the available CSS style for the document and adding    * them to the styles selector    */  public void registerDocumentStyles() {    if (jcmbStyleSelector == null || htmlDoc == null) {      return;    }    jcmbStyleSelector.setEnabled(false);    jcmbStyleSelector.removeAllItems();    jcmbStyleSelector.addItem("(none)");    for (Enumeration e = htmlDoc.getStyleNames(); e.hasMoreElements();) {      String name = (String) e.nextElement();      if(name.length() > 0 && name.charAt(0) == '.') {        jcmbStyleSelector.addItem(name.substring(1));      }    }    jcmbStyleSelector.setEnabled(true);  }  private void colorFont(ActionEvent ae) {    final String command = Lang.rb.getString("Color");    Component invoker = (Component) ae.getSource();    JPopupMenu jPop = new JPopupMenu(command);    final ItemQuickPickPanel cPanel = new ItemQuickPickPanel(command);    cPanel.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent ae) {        if (cPanel.isColorSet()) {          Color color = cPanel.getColor();          if (color == null)            color = Color.black;          Action action = new StyledEditorKit.ForegroundAction(command, color);          action.actionPerformed(new ActionEvent(getTextPane(), 0, command));        }      }    });    jPop.add(cPanel);    jPop.show(invoker, 0, invoker.getSize().height);  }  private void colorFontBack(ActionEvent ae) {    final String command = Lang.rb.getString("Color");    Component invoker = (Component) ae.getSource();    JPopupMenu jPop = new JPopupMenu(command);    final ItemQuickPickPanel cPanel = new ItemQuickPickPanel(command);    cPanel.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent ae) {        Color color = cPanel.getColor();        if (color != null) {          MutableAttributeSet attr = new SimpleAttributeSet();          StyleConstants.setBackground(attr, color);          setAttributeSet(attr);        }      }    });    jPop.add(cPanel);    jPop.show(invoker, 0, invoker.getSize().height);  }  private void colorBack(ActionEvent ae) {    String command = Lang.rb.getString("Color");    //Color initialColor = Color.black;    //final Element element = htmlDoc.getElementByTag(HTML.Tag.BODY);    /*    if (element != null) {      AttributeSet attributeset = element.getAttributes();      StyleSheet stylesheet = htmlDoc.getStyleSheet();      Object obj = attributeset.getAttribute(HTML.Attribute.BGCOLOR);      if (obj != null)        initialColor = stylesheet.stringToColor((String) obj);    }     */    Component invoker = (Component) ae.getSource();    JPopupMenu jPop = new JPopupMenu(command);    final ItemQuickPickPanel cPanel = new ItemQuickPickPanel(command);    cPanel.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent ae) {        if (cPanel.isColorSet()) {          Color color = cPanel.getColor();          if (color == null) {            // transparant            JTextPane pane = getTextPane();            String body = pane.getText();            int iBody = body.indexOf("<body ");            if (iBody >= 0) {              int iBodyEnd = body.indexOf('>', iBody);              body = body.substring(0, iBody) + "<body" + body.substring(iBodyEnd);              pane.setText(body);            }          } else if (color != null) {            SimpleAttributeSet simpleattributeset = new SimpleAttributeSet();            simpleattributeset.addAttribute(HTML.Attribute.BGCOLOR, Utils.colorToHex(color));            htmlDoc.addAttributes(htmlDoc.getElementByTag(HTML.Tag.BODY), simpleattributeset);            documentChanged();          }        }      }    });    jPop.add(cPanel);    jPop.show(invoker, 0, invoker.getSize().height);  }  // NEW  // This implementation is rather barbarian,  // but it works and I don't have a better solution.  public void documentChanged() {    JTextPane pane = getTextPane();    pane.setDocument(new HTMLDocument());    // This alone will not work, since PropertyChange will not be fired    pane.setDocument(htmlDoc);    pane.revalidate();    pane.repaint();  }  /** Method for inserting an HTML Table    * NOTE : This is a much-improved version from earlier releases,    *        but still displays some quirky behaviour.    */  private void insertTable()  throws IOException, BadLocationException, RuntimeException  {    Window w = SwingUtilities.windowForComponent(this);    if (w instanceof Dialog || w instanceof Frame) {      TableInputDialog tableInput = null;      if (w instanceof Dialog)        tableInput = new TableInputDialog((Dialog) w, Lang.rb.getString("TableDialogTitle"), true);      else        tableInput = new TableInputDialog((Frame) w, Lang.rb.getString("TableDialogTitle"), true);      tableInput.setVisible(true);      int rows    = tableInput.getRows();      int cols    = tableInput.getCols();      int border  = tableInput.getBorder();      int spacing = tableInput.getSpacing();      int padding = tableInput.getPadding();      if(rows > 0 && cols > 0)      {        StringBuffer tableBody = new StringBuffer("<TABLE");        if(border > -1)        {          tableBody.append(" BORDER=" + '"' + border + '"');        }        else        {          tableBody.append(" BORDER=" + '"' + 1 + '"');        }        if(spacing > -1)        {          tableBody.append(" CELLSPACING=" + '"' + spacing + '"');        }        if(padding > -1)        {          tableBody.append(" CELLPADDING=" + '"' + padding + '"');        }        tableBody.append('>');        for(int i = 0; i < rows; i++)        {          tableBody.append("<TR>");          for(int j = 0; j < cols; j++)          {            tableBody.append("<TD></TD>");          }          tableBody.append("</TR>");        }        tableBody.append("</TABLE>");        int caretPos = jtpMain.getCaretPosition();        htmlKit.insertHTML(htmlDoc, caretPos, tableBody.toString(), 0, 0, HTML.Tag.TABLE);        jtpMain.setCaretPosition(caretPos + 1);        showAttributes();      }      Jaguar.this.repaint();    }  }  /** Method for inserting a row into an HTML Table    * NOTE : This should be rewritten to insert a new row from the start of the current row.    *        Currently it inserts the row at the cursor position.    */  private void insertTableRow(int cols)  {    StringBuffer sRow = new StringBuffer();    sRow.append("<TR>");    for(int i = 0; i < cols; i++)    {      sRow.append("<TD></TD>");    }    sRow.append("</TR>");    ActionEvent actionEvent = new ActionEvent(jtpMain, 0, "insertTableRow");    htmlDoc.startUndoableSequence();    new HTMLEditorKit.InsertHTMLTextAction("insertTableRow", sRow.toString(), HTML.Tag.TABLE, HTML.Tag.TR).actionPerformed(actionEvent);    refreshOnUpdate(); // optional refresh code    htmlDoc.endUndoableSequence();  }  /** Method for inserting a cell into an HTML Table    */  private void insertTableCell()  {    String sCell = "<TD></TD>";    ActionEvent actionEvent = new ActionEvent(jtpMain, 0, "insertTableCell");    htmlDoc.startUndoableSequence();    new HTMLEditorKit.InsertHTMLTextAction("insertTableCell", sCell, HTML.Tag.TR, HTML.Tag.TD, HTML.Tag.TH, HTML.Tag.TD).actionPerformed(actionEvent);    refreshOnUpdate(); // optional refresh code    htmlDoc.endUndoableSequence();  }  /** Method for inserting a break (BR) element    */  private void insertBreak()  throws IOException, BadLocationException, RuntimeException  {    int caretPos = jtpMain.getCaretPosition();    htmlKit.insertHTML(htmlDoc, caretPos, "<BR>", 0, 0, HTML.Tag.BR);    showAttributes();  }  /** Method for inserting a horizontal rule (HR) element    */  private void insertHRule()  throws IOException, BadLocationException, RuntimeException  {    int caretPos = jtpMain.getCaretPosition();    htmlKit.insertHTML(htmlDoc, caretPos, "<HR>", 0, 0, HTML.Tag.HR);    showAttributes();  }  /** Method to initiate a find/replace operation    */  private void doSearch(String searchFindTerm, String searchReplaceTerm, boolean bIsFindReplace, boolean bCaseSensitive, boolean bStartAtTop)  {    boolean bReplaceAll = false;    if(searchFindTerm == null || (bIsFindReplace && searchReplaceTerm == null))    {      SearchDialog sdSearchInput = null;      Window w = SwingUtilities.windowForComponent(this);      if (w instanceof Dialog || w instanceof Frame) {        if (w instanceof Dialog)          sdSearchInput = new SearchDialog((Dialog) w, Lang.rb.getString("SearchDialogTitle"), true, bIsFindReplace, bCaseSensitive, bStartAtTop);        else          sdSearchInput = new SearchDialog((Frame) w, Lang.rb.getString("SearchDialogTitle"), true, bIsFindReplace, bCaseSensitive, bStartAtTop);        searchFindTerm    = sdSearchInput.getFindTerm();        searchReplaceTerm = sdSearchInput.getReplaceTerm();        bCaseSensitive    = sdSearchInput.getCaseSensitive();        bStartAtTop       = sdSearchInput.getStartAtTop();        bReplaceAll       = sdSearchInput.getReplaceAll();      }      if(searchFindTerm != null && (!bIsFindReplace || searchReplaceTerm != null))      {        if(bReplaceAll)        {          int results = findText(searchFindTerm, searchReplaceTerm, bCaseSensitive, 0);          int findOffset = results;          if(results > -1)          {            findOffset = ((findOffset - searchFindTerm.length()) + searchReplaceTerm.length()) + 1;            while(results > -1)            {              results    = findText(searchFindTerm, searchReplaceTerm, bCaseSensitive, findOffset);              findOffset = ((results - searchFindTerm.length()) + searchReplaceTerm.length()) + 1;            }          }          else          {            showSimpleInfoDialog(this, "", true, "No occurrences found:\n" + searchFindTerm);          }        } else {          int results = findText(searchFindTerm, searchReplaceTerm, bCaseSensitive, (bStartAtTop ? 0 : jtpSource.getCaretPosition()));          if (results == -1) {            showSimpleInfoDialog(this, "", true, "No match found:\n" + searchFindTerm);          }        }        lastSearchFindTerm    = searchFindTerm;        if (searchReplaceTerm != null) {          lastSearchReplaceTerm = searchReplaceTerm;        } else {          lastSearchReplaceTerm = null;        }        lastSearchCaseSetting = bCaseSensitive;        lastSearchTopSetting  = bStartAtTop;      }    }  }  /** Method for finding (and optionally replacing) a string in the text    */  private int findText(String findTerm, String replaceTerm, boolean bCaseSenstive, int iOffset) {    int searchPlace =      (bCaseSenstive ?        jtpSource.getText().indexOf(findTerm, iOffset) :        jtpSource.getText().toLowerCase().indexOf(findTerm.toLowerCase(), iOffset)      );    if (searchPlace > -1) {      jtpSource.select(searchPlace, searchPlace + findTerm.length());      if (replaceTerm != null) {        jtpSource.replaceSelection(replaceTerm);        jtpMain.setText(jtpSource.getText());      }    }    return searchPlace;  }  /** Method for inserting an image    */  private void insertImage(File whatImage) throws IOException, BadLocationException, RuntimeException {    if (whatImage == null) {      whatImage = getImageFromChooser(".", extsIMG, Lang.rb.getString("FiletypeIMG"));    }    if (whatImage != null) {      int caretPos = jtpMain.getCaretPosition();      htmlKit.insertHTML(htmlDoc, caretPos, "<IMG SRC=" + whatImage + ">", 0, 0, HTML.Tag.IMG);      showAttributes();      jtpMain.repaint();    }  }  private void insertImage(ActionEvent ae) throws IOException, BadLocationException {    final String command = Lang.rb.getString("InsertImage");    Component invoker = (Component) ae.getSource();    JPopupMenu jPop = new JPopupMenu(command);    final ItemQuickPickPanel cPanel = new ItemQuickPickPanel(command, com.CH_co.util.ImageNums.emotions);    cPanel.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent ae) {        Integer indexI = cPanel.getMainCompIndex();        if (indexI != null) {          int imageIndex = com.CH_co.util.ImageNums.emotions[indexI.intValue()];          String imageName = "images/" + com.CH_co.util.ImageNums.images[imageIndex] + ".gif";          int caretPos = jtpMain.getCaretPosition();          try {            htmlKit.insertHTML(htmlDoc, caretPos, "<IMG SRC=" + imageName + ">", 0, 0, HTML.Tag.IMG);          } catch (Throwable t) {          }          showAttributes();          jtpMain.repaint();        }      }    });    jPop.add(cPanel);    jPop.show(invoker, 0, invoker.getSize().height);  }  /** Method for saving text as a complete HTML document    */  private void writeOut(HTMLDocument doc, File whatFile)  throws IOException, BadLocationException  {    if(whatFile == null)    {      whatFile = getFileFromChooser(".", JFileChooser.SAVE_DIALOG, extsHTML, Lang.rb.getString("FiletypeHTML"));    }    if(whatFile != null)    {      FileWriter fw = new FileWriter(whatFile);      htmlKit.write(fw, doc, 0, doc.getLength());      fw.flush();      fw.close();      currentFile = whatFile;      updateTitle();    }    this.repaint();  }  /** Method for saving text as an HTML fragment    */  private void writeOutFragment(HTMLDocument doc, String containingTag)  throws IOException, BadLocationException  {    File whatFile = getFileFromChooser(".", JFileChooser.SAVE_DIALOG, extsHTML, Lang.rb.getString("FiletypeHTML"));    if(whatFile != null)    {      FileWriter fw = new FileWriter(whatFile);//			Element eleBody = locateElementInDocument((StyledDocument)doc, containingTag);//			htmlKit.write(fw, doc, eleBody.getStartOffset(), eleBody.getEndOffset());      String docTextCase = jtpSource.getText().toLowerCase();      int tagStart       = docTextCase.indexOf("<" + containingTag.toLowerCase());      int tagStartClose  = docTextCase.indexOf(">", tagStart) + 1;      String closeTag    = "</" + containingTag.toLowerCase() + ">";      int tagEndOpen     = docTextCase.indexOf(closeTag);      if(tagStartClose < 0) { tagStartClose = 0; }      if(tagEndOpen < 0 || tagEndOpen > docTextCase.length()) { tagEndOpen = docTextCase.length(); }      String bodyText = jtpSource.getText().substring(tagStartClose, tagEndOpen);      fw.write(bodyText, 0, bodyText.length());      fw.flush();      fw.close();    }    this.repaint();  }  /** Method for saving text as an RTF document    */  private void writeOutRTF(StyledDocument doc)  throws IOException, BadLocationException  {    File whatFile = getFileFromChooser(".", JFileChooser.SAVE_DIALOG, extsRTF, Lang.rb.getString("FiletypeRTF"));    if(whatFile != null)    {      FileOutputStream fos = new FileOutputStream(whatFile);      RTFEditorKit rtfKit = new RTFEditorKit();      rtfKit.write(fos, doc, 0, doc.getLength());      fos.flush();      fos.close();    }    this.repaint();  }  /** Method to invoke loading HTML into the app    */  private void openDocument(File whatFile)  throws IOException, BadLocationException  {    if(whatFile == null)    {      whatFile = getFileFromChooser(".", JFileChooser.OPEN_DIALOG, extsHTML, Lang.rb.getString("FiletypeHTML"));    }    if(whatFile != null)    {      try      {        loadDocument(whatFile, null);      }      catch(ChangedCharSetException ccse)      {        String charsetType = ccse.getCharSetSpec().toLowerCase();        int pos = charsetType.indexOf("charset");        if(pos == -1)        {          throw ccse;        }        while(pos < charsetType.length() && charsetType.charAt(pos) != '=')        {          pos++;        }        pos++; // Places file cursor past the equals sign (=)        String whatEncoding = charsetType.substring(pos).trim();        loadDocument(whatFile, whatEncoding);      }    }    this.repaint();  }  /** Method for loading HTML document into, including document encoding setting    */  private void loadDocument(File whatFile, String whatEncoding) throws IOException, BadLocationException {    Reader r = null;    htmlDoc = (MutableHTMLDocument)(htmlKit.createDefaultDocument());    try {      if (whatEncoding == null) {        r = new InputStreamReader(new FileInputStream(whatFile));      } else {        r = new InputStreamReader(new FileInputStream(whatFile), whatEncoding);        htmlDoc.putProperty("IgnoreCharsetDirective", Boolean.TRUE);      }      htmlKit.read(r, htmlDoc, 0);      r.close();      registerDocument(htmlDoc);      jtpSource.setText(jtpMain.getText());      currentFile = whatFile;      updateTitle();    } finally {      if(r != null) {        r.close();      }    }  }  /** Method for loading a Stylesheet into the app    */  private void openStyleSheet(File fileCSS) throws IOException {    if (fileCSS == null) {      fileCSS = getFileFromChooser(".", JFileChooser.OPEN_DIALOG, extsCSS, Lang.rb.getString("FiletypeCSS"));    }    if (fileCSS != null) {        String currDocText = jtpMain.getText();      htmlDoc = (MutableHTMLDocument)(htmlKit.createDefaultDocument());      styleSheet = htmlDoc.getStyleSheet();      URL cssUrl = fileCSS.toURL();      InputStream is = cssUrl.openStream();      BufferedReader br = new BufferedReader(new InputStreamReader(is));      styleSheet.loadRules(br, cssUrl);      br.close();        htmlDoc = new MutableHTMLDocument(styleSheet);      registerDocument(htmlDoc);      jtpMain.setText(currDocText);      jtpSource.setText(jtpMain.getText());    }    this.repaint();  }  /** Method for serializing the document out to a file    */  public void serializeOut(HTMLDocument doc) throws IOException {    File whatFile = getFileFromChooser(".", JFileChooser.SAVE_DIALOG, extsSer, Lang.rb.getString("FiletypeSer"));    if (whatFile != null) {      ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(whatFile));      oos.writeObject(doc);      oos.flush();      oos.close();    }    this.repaint();  }  /** Method for reading in a serialized document from a file    */  public void serializeIn() throws IOException, ClassNotFoundException {    File whatFile = getFileFromChooser(".", JFileChooser.OPEN_DIALOG, extsSer, Lang.rb.getString("FiletypeSer"));    if (whatFile != null) {      ObjectInputStream ois = new ObjectInputStream(new FileInputStream(whatFile));      htmlDoc = (MutableHTMLDocument)(ois.readObject());      ois.close();      registerDocument(htmlDoc);      validate();    }    this.repaint();  }  /** Method for obtaining a File for input/output using a JFileChooser dialog    */  private File getFileFromChooser(String startDir, int dialogType, String[] exts, String desc) {    JFileChooser jfileDialog = new JFileChooser(startDir);    jfileDialog.setDialogType(dialogType);    jfileDialog.setFileFilter(new MutableFilter(exts, desc));    int optionSelected = JFileChooser.CANCEL_OPTION;    if (dialogType == JFileChooser.OPEN_DIALOG) {      optionSelected = jfileDialog.showOpenDialog(this);    } else if(dialogType == JFileChooser.SAVE_DIALOG) {      optionSelected = jfileDialog.showSaveDialog(this);    } else { // default to an OPEN_DIALOG      optionSelected = jfileDialog.showOpenDialog(this);    }    if (optionSelected == JFileChooser.APPROVE_OPTION) {      return jfileDialog.getSelectedFile();    }    return (File)null;  }  /** Method for obtaining an Image for input using a custom JFileChooser dialog    */  private File getImageFromChooser(String startDir, String[] exts, String desc) {    ImageFileChooser jImageDialog = new ImageFileChooser(startDir);    jImageDialog.setDialogType(JFileChooser.CUSTOM_DIALOG);    jImageDialog.setFileFilter(new MutableFilter(exts, desc));    jImageDialog.setDialogTitle("Select Image To Insert");    int optionSelected = JFileChooser.CANCEL_OPTION;    optionSelected = jImageDialog.showDialog(this, Lang.rb.getString("Insert"));    if (optionSelected == JFileChooser.APPROVE_OPTION) {      return jImageDialog.getSelectedFile();    }    return (File)null;  }  /** Method for describing the node hierarchy of the document    */  private void describeDocument(StyledDocument doc) {    Element[] elements = doc.getRootElements();    for(int i = 0; i < elements.length; i++) {      indent = indentStep;      for(int j = 0; j < indent; j++) { System.out.print(" "); }      System.out.print(elements[i]);      traverseElement(elements[i]);      System.out.println("");    }  }  /** Traverses nodes for the describing method    */  private void traverseElement(Element element) {    indent += indentStep;    for(int i = 0; i < element.getElementCount(); i++) {      for(int j = 0; j < indent; j++) { System.out.print(" "); }      System.out.print(element.getElement(i));      traverseElement(element.getElement(i));    }    indent -= indentStep;  }  /** Method to locate a node element by name    */  private Element locateElementInDocument(StyledDocument doc, String elementName) {    Element[] elements = doc.getRootElements();    for(int i = 0; i < elements.length; i++) {      if(elements[i].getName().equalsIgnoreCase(elementName)) {        return elements[i];      } else {        Element rtnElement = locateChildElementInDocument(elements[i], elementName);        if(rtnElement != null) {          return rtnElement;        }      }    }    return (Element)null;  }  /** Traverses nodes for the locating method    */  private Element locateChildElementInDocument(Element element, String elementName) {    for(int i = 0; i < element.getElementCount(); i++) {      if(element.getElement(i).getName().equalsIgnoreCase(elementName)) {        return element.getElement(i);      }    }    return (Element)null;  }  /** Convenience method for updating the application title bar    */  private void updateTitle() {    // Marcin: change from frame to panel    //this.setTitle(appName + (currentFile == null ? "" : " - " + currentFile.getName()));  }  /** Convenience method for obtaining the JTextPane    */  public JTextPane getTextPane() {    return currentPane;  }  protected Document getDocument() {    return htmlDoc;  }  /** Convenience method for obtain the current file handle.    */  public File getCurrentFile() {    return currentFile;  }  /** Convenience method for clearing out the UndoManager    */  public void purgeUndos() {    if(undoMngr != null) {      undoMngr.discardAllEdits();      updateUndoRedoState();    }  }  /** Convenience method for refreshing and displaying changes    */  public void refreshOnUpdate() {    try {      int caretMain = jtpMain.getCaretPosition();      jtpMain.setText(jtpMain.getText());      if (caretMain >= 0) {        try {          jtpMain.setCaretPosition(caretMain);        } catch (Throwable e1) {          try {            jtpMain.setCaretPosition(caretMain+1);          } catch (Throwable e2) {            try {              jtpMain.setCaretPosition(caretMain-1);            } catch (Throwable e3) {            }          }        }      }      int caretSource = jtpSource.getCaretPosition();      jtpSource.setText(jtpMain.getText());      if (caretSource >= 0) {        try {          jtpSource.setCaretPosition(caretSource);        } catch (Throwable e1) {          try {            jtpSource.setCaretPosition(caretSource+1);          } catch (Throwable e2) {            try {              jtpSource.setCaretPosition(caretSource-1);            } catch (Throwable e3) {            }          }        }      }    } catch (Throwable t) {    }    this.repaint();  }  /** Convenience method for fetching icon images from jar file    */  private ImageIcon getJaguarIcon(String iconName) {    return new ImageIcon(getToolkit().createImage(getClass().getResource("icons/" + iconName + ".png")));  }  /** Convenience method for outputting exceptions    */  private void logException(String internalMessage, Exception e) {    //System.out.println(internalMessage);    //e.printStackTrace(System.out);  }  /** Convenience method for toggling source window visibility    */  private void toggleSourceWindow() {    if (!(jspSource.isShowing())) {      jtpSource.setText(jtpMain.getText());      /*      jspltDisplay.setRightComponent(jspSource);      if (exclusiveEdit) {        jspltDisplay.setDividerLocation(0);        jspltDisplay.setEnabled(false);      } else {        jspltDisplay.setDividerLocation(iSplitPos);        jspltDisplay.setEnabled(true);      }       */      jMainEditorContainer.remove(jspMain);      jMainEditorContainer.add(jspSource, BorderLayout.CENTER);      jtpSource.requestFocus();      jspSource.repaint();      currentPane = jtpSource;    } else {      jtpMain.setText(jtpSource.getText());      /*      iSplitPos = jspltDisplay.getDividerLocation();      jspltDisplay.remove(jspSource);       */      jMainEditorContainer.remove(jspSource);      jMainEditorContainer.add(jspMain, BorderLayout.CENTER);      jtpMain.requestFocus();      jspMain.repaint();      currentPane = jtpMain;    }    this.validate();    if (jcbmiViewSource != null)      jcbmiViewSource.setSelected(jspSource.isShowing());    jtbtnViewSource.setSelected(jspSource.isShowing());  }  /** Searches the specified element for CLASS attribute setting    */  private String findStyle(Element element) {    AttributeSet as = element.getAttributes();    if(as == null) {      return null;    }    Object val = as.getAttribute(HTML.Attribute.CLASS);    if(val != null && (val instanceof String)) {      return (String)val;    }    for(Enumeration e = as.getAttributeNames(); e.hasMoreElements();) {      Object key = e.nextElement();      if(key instanceof HTML.Tag) {        AttributeSet eas = (AttributeSet)(as.getAttribute(key));        if(eas != null) {          val = eas.getAttribute(HTML.Attribute.CLASS);          if(val != null) {            return (String)val;          }        }      }    }    return null;  }  /** Handles caret tracking and related events, such as displaying the current style    * of the text under the caret    */  private void handleCaretPositionChange(CaretEvent ce) {    int caretPos = ce.getDot()-1;    if (caretPos < 0)      caretPos = 0;    showAttributes(caretPos);  }  private void showAttributes() {    int caretPos = jtpMain.getCaretPosition();    if (caretPos > 0)      caretPos --;    showAttributes(caretPos);  }  private void showAttributes(int caretPos) {    Element	element = htmlDoc.getCharacterElement(caretPos);    if (element == null) {      return;    }    m_skipUpdate = true;    AttributeSet attr = element.getAttributes();    jtbtnBold.setSelected(StyleConstants.isBold(attr));    jtbtnItalic.setSelected(StyleConstants.isItalic(attr));    jtbtnUnderline.setSelected(StyleConstants.isUnderline(attr));    if (jtbtnSubscript != null)      jtbtnSubscript.setSelected(StyleConstants.isSubscript(attr));    if (jtbtnSuperscript != null)      jtbtnSuperscript.setSelected(StyleConstants.isSuperscript(attr));    if (jcmbStyleSelector != null) {      String style = null;      Vector vcStyles = new Vector();      while (element != null) {        if (style == null) {          style = findStyle(element);        }        vcStyles.add(element);        element = element.getParentElement();      }      int stylefound = -1;      if (style != null) {        for(int i = 0; i < jcmbStyleSelector.getItemCount(); i++) {          String in = (String)(jcmbStyleSelector.getItemAt(i));          if(in.equalsIgnoreCase(style)) {            stylefound = i;            break;          }        }      }      if(stylefound > -1) {        Action ac = jcmbStyleSelector.getAction();        ac.setEnabled(false);        jcmbStyleSelector.setSelectedIndex(stylefound);        ac.setEnabled(true);      } else {        jcmbStyleSelector.setSelectedIndex(0);      }    }    String name = StyleConstants.getFontFamily(attr);    if (!m_fontName.equals(name)) {      m_fontName = name;      if (m_cbFonts != null)        m_cbFonts.setSelectedItem(name);    }    /*    int size = StyleConstants.getFontSize(attr);    if (m_fontSize != size) {      m_fontSize = size;      if (m_cbSizes != null) {        m_cbSizes.setSelectedItem(Integer.toString(m_fontSize));      }    }     */    // NEW    Element ep = htmlDoc.getParagraphElement(caretPos);    HTML.Tag attrName = (HTML.Tag)ep.getAttributes().getAttribute(StyleConstants.NameAttribute);    int index = -1;    if (attrName != null) {      for (int k=0; k<STYLES[0].length; k++) {        if (attrName.equals(STYLES[0][k])) {          index = k;          break;        }      }    }    if (m_cbStyles != null) {      if (index >= 0)        m_cbStyles.setSelectedIndex(index);      else        m_cbStyles.setSelectedIndex(0);    }    m_skipUpdate = false;  }  /**   * Marcin: conveniance method to show a common info dialog.   */  private SimpleInfoDialog showSimpleInfoDialog(Component parent, String title, boolean bModal, String message) {    SimpleInfoDialog sid = null;    Window w = SwingUtilities.windowForComponent(parent);    if (w instanceof Dialog)      sid = new SimpleInfoDialog((Dialog) w, title, bModal, message);    else if (w instanceof Frame)      sid = new SimpleInfoDialog((Frame) w, title, bModal, message);    return sid;  }  /** Main method    */  public static void main(String[] args) {    if (args.length > 0) {      String sDocument = null;      String sStyleSheet = null;      String sRawDocument = null;      boolean includeToolBar = true;      boolean includeViewSource = false;      boolean includeMenuIcons = true;      boolean modeExclusive = true;      String sLang = null;      String sCtry = null;      boolean debugOn = false;      for(int i = 0; i < args.length; i++) {        if      (args[i].equals("-t"))     { includeToolBar = true; }        else if (args[i].equals("-T"))     { includeToolBar = false; }        else if (args[i].equals("-s"))     { includeViewSource = true; }        else if (args[i].equals("-S"))     { includeViewSource = false; }        else if (args[i].equals("-m"))     { includeMenuIcons = true; }        else if (args[i].equals("-M"))     { includeMenuIcons = false; }        else if (args[i].equals("-x"))     { modeExclusive = true; }        else if (args[i].equals("-X"))     { modeExclusive = false; }        else if (args[i].startsWith("-f")) { sDocument = args[i].substring(2, args[i].length()); }        else if (args[i].startsWith("-c")) { sStyleSheet = args[i].substring(2, args[i].length()); }        else if (args[i].startsWith("-r")) { sRawDocument = args[i].substring(2, args[i].length()); }        else if (args[i].startsWith("-l")) {          if (args[i].indexOf('_') > -1) {            sLang = args[i].substring(2, args[i].indexOf('_'));            sCtry = args[i].substring(args[i].indexOf('_') + 1, args[i].length());          }        }        else if (args[i].equals("-d"))     { debugOn = true; }        else if (args[i].equals("-D"))     { debugOn = false; }      }      new Jaguar(sDocument, sStyleSheet, sRawDocument, includeToolBar, includeViewSource, includeMenuIcons, modeExclusive, sLang, sCtry, debugOn);    } else {      new Jaguar();    }  }/* Inner Classes --------------------------------------------- */  /** Class for implementing Undo as an autonomous action    */  private class UndoAction extends AbstractActionTraced {    public UndoAction() {      super(Lang.rb.getString("Undo"));      setEnabled(false);    }    public void actionPerformedTraced(ActionEvent event) {      try {        undoMngr.undo();      } catch(CannotUndoException ex) {        System.out.println(Lang.rb.getString("UndoError") + ex);        ex.printStackTrace();      }      updateUndoState();      redoAction.updateRedoState();    }    protected void updateUndoState() {      if(undoMngr.canUndo()) {        setEnabled(true);        putValue(Action.NAME, undoMngr.getUndoPresentationName());      } else {        setEnabled(false);        putValue(Action.NAME, Lang.rb.getString("Undo"));      }    }  }  /** Class for implementing Redo as an autonomous action    */  private class RedoAction extends AbstractActionTraced {    public RedoAction() {      super(Lang.rb.getString("Redo"));      setEnabled(false);    }    public void actionPerformedTraced(ActionEvent event) {      try {        undoMngr.redo();      } catch(CannotUndoException ex) {        System.out.println(Lang.rb.getString("RedoError") + ex);        ex.printStackTrace();      }      updateRedoState();      undoAction.updateUndoState();    }    protected void updateRedoState() {      if(undoMngr.canRedo()) {        setEnabled(true);        putValue(Action.NAME, undoMngr.getRedoPresentationName());      } else {        setEnabled(false);        putValue(Action.NAME, Lang.rb.getString("Redo"));      }    }  }  private void updateUndoRedoState() {    undoAction.updateUndoState();    redoAction.updateRedoState();  }  /** Class for implementing the Undo listener to handle the Undo and Redo actions    */  private class CustomUndoableEditListener implements UndoableEditListener {    public void undoableEditHappened(UndoableEditEvent uee) {      if (uee != null) {        UndoableEdit ue = uee.getEdit();        undoMngr.addEdit(ue);      }      updateUndoRedoState();    }  }  /** Class for implementing custom HTML insertion actions    */  private class CustomAction extends StyledEditorKit.StyledTextAction {    HTML.Tag htmlTag;    Hashtable htmlAttribs;    public CustomAction(String actionName, HTML.Tag inTag, Hashtable attribs) {      super(actionName);      htmlTag     = inTag;      htmlAttribs = attribs;    }    public CustomAction(String actionName, HTML.Tag inTag) {      this(actionName, inTag, new Hashtable());    }    public void actionPerformed(ActionEvent ae) {      JTextPane parentTextPane = Jaguar.this.getTextPane();      boolean moveCaret = false;      String selText = parentTextPane.getSelectedText();      int textLength = -1;      if (selText != null) {        textLength = selText.length();      }      if (!htmlTag.equals(HTML.Tag.A) && (selText == null || textLength < 1)) {        SimpleInfoDialog sidWarn = showSimpleInfoDialog(Jaguar.this, "", true, "No text was selected.");      } else {        SimpleAttributeSet sasTag  = new SimpleAttributeSet();        SimpleAttributeSet sasAttr = new SimpleAttributeSet();        if (htmlTag.equals(HTML.Tag.A)) {          if (!htmlAttribs.containsKey("href")) {            UserInputDialog uidInput = null;            Window w = SwingUtilities.windowForComponent(Jaguar.this);            if (w instanceof Dialog || w instanceof Frame) {              String[] options = selText == null ? new String[] { "Link to:", "Text to display (optional):" } : new String[] { "Link to:" };              String[] defaults = selText == null ? new String[] { "http://", "" } : new String[] { "http://" };              if (w instanceof Dialog)                uidInput = new UserInputDialog((Dialog) w, Lang.rb.getString("AnchorDialogTitle"), true, options, defaults);              else                uidInput = new UserInputDialog((Frame) w, Lang.rb.getString("AnchorDialogTitle"), true, options, defaults);              String newAnchor = uidInput.getInputText(0);              if (selText == null) {                String sText = uidInput.getInputText(1);                selText = sText != null ? sText.trim() : "";                if (selText.length() == 0)                  selText = newAnchor;              }              if (newAnchor != null) {                htmlAttribs.put("href", newAnchor);                if (selText == null) {                  selText = newAnchor;                  moveCaret = true;                }              } else {                Jaguar.this.repaint();                return;              }            } else {              return;            }          }        }        if (htmlAttribs.size() > 0) {          java.util.Enumeration attribEntries = htmlAttribs.keys();          while (attribEntries.hasMoreElements()) {            Object entryKey   = attribEntries.nextElement();            Object entryValue = htmlAttribs.get(entryKey);            sasAttr.addAttribute(entryKey, entryValue);            htmlAttribs.remove(entryKey);          }        }        htmlDoc.startUndoableSequence();        int caretOffset = parentTextPane.getSelectionStart();        int internalTextLength = selText.length();        int extraLen = 0;        if (htmlTag.equals(HTML.Tag.A)) {          int docLen = parentTextPane.getDocument().getLength();          if (caretOffset == docLen || (!moveCaret && caretOffset+internalTextLength == docLen)) {            ActionEvent aEvent = new ActionEvent(parentTextPane, 0, ";");            new DefaultEditorKit.InsertContentAction().actionPerformed(aEvent);            parentTextPane.setCaretPosition(parentTextPane.getCaretPosition()-1);            extraLen = 1;          }        }        sasTag.addAttribute(htmlTag, sasAttr);        MutableAttributeSet masAttribs = getStyledEditorKit(parentTextPane).getInputAttributes();        masAttribs.addAttributes(sasTag);        ActionEvent actionEvent = new ActionEvent(parentTextPane, 0, selText);        new DefaultEditorKit.InsertContentAction().actionPerformed(actionEvent);        Jaguar.this.refreshOnUpdate();        if (moveCaret) {          parentTextPane.setCaretPosition(caretOffset + internalTextLength + extraLen);        } else {          parentTextPane.select(caretOffset, caretOffset + internalTextLength);        }        htmlDoc.endUndoableSequence();      }    }  }  private class SubscriptAction extends StyledEditorKit.StyledTextAction {    public SubscriptAction(String actionName) {      super(actionName);    }    public void actionPerformed(ActionEvent ae) {      JTextPane parentTextPane = Jaguar.this.getTextPane();      MutableAttributeSet attr = new SimpleAttributeSet();      StyleConstants.setSubscript(attr, ((AbstractButton) ae.getSource()).isSelected());      setCharacterAttributes(parentTextPane, attr, false);    }  }  private class SuperscriptAction extends StyledEditorKit.StyledTextAction {    public SuperscriptAction(String actionName) {      super(actionName);    }    public void actionPerformed(ActionEvent ae) {      JTextPane parentTextPane = Jaguar.this.getTextPane();      MutableAttributeSet attr = new SimpleAttributeSet();      StyleConstants.setSuperscript(attr, ((AbstractButton) ae.getSource()).isSelected());      setCharacterAttributes(parentTextPane, attr, false);    }  }  public void setSelection(int xStart, int xFinish, boolean moveUp) {    if (moveUp) {      jtpMain.setCaretPosition(xFinish);      jtpMain.moveCaretPosition(xStart);    } else {      jtpMain.select(xStart, xFinish);    }    m_xStart = jtpMain.getSelectionStart();    m_xFinish = jtpMain.getSelectionEnd();  }  // NEW  private void setAttributeSet(AttributeSet attr) {    setAttributeSet(attr, false, false);  }  private void setAttributeSet(AttributeSet attr, boolean replace) {    int xStart = jtpMain.getSelectionStart();    int xFinish = jtpMain.getSelectionEnd();    if (!jtpMain.hasFocus()) {      xStart = m_xStart;      xFinish = m_xFinish;    }    boolean paragraphAttributes = xStart == xFinish;    setAttributeSet(attr, paragraphAttributes, replace);  }  // NEW  public static void setAttributeSet(JEditorPane textPane, HTMLDocument htmlDoc, HTMLEditorKit htmlKit, AttributeSet attr, boolean setParagraphAttributes, boolean replace, int xStart, int xFinish) {    int start = Math.min(xStart, xFinish);    int finish = Math.max(xStart, xFinish);    try {      if (setParagraphAttributes)        htmlDoc.setParagraphAttributes(start, finish-start, attr, replace);      else if (start != finish)        htmlDoc.setCharacterAttributes(start, finish-start, attr, replace);      else {        MutableAttributeSet inputAttributes = htmlKit.getInputAttributes();        inputAttributes.addAttributes(attr);      }    } catch (Throwable t) {    }  }  private void setAttributeSet(AttributeSet attr, boolean setParagraphAttributes, boolean replace) {    if (m_skipUpdate)      return;    int xStart = jtpMain.getSelectionStart();    int xFinish = jtpMain.getSelectionEnd();    if (!jtpMain.hasFocus()) {      xStart = m_xStart;      xFinish = m_xFinish;    }    setAttributeSet(jtpMain, htmlDoc, htmlKit, attr, setParagraphAttributes, replace, xStart, xFinish);  }  /** Class for implementing HTML format actions    * (NOTE : Does not toggle. User must use the "Clear Format" option to remove formatting correctly.)    */  private class FormatAction extends StyledEditorKit.StyledTextAction {    HTML.Tag htmlTag;    public FormatAction(String actionName, HTML.Tag inTag) {      super(actionName);      htmlTag = inTag;    }    public void actionPerformed(ActionEvent ae) {      JTextPane parentTextPane = Jaguar.this.getTextPane();      String selText = parentTextPane.getSelectedText();      int textLength = -1;      if(selText != null) {        textLength = selText.length();      }      if(selText == null || textLength < 1) {        SimpleInfoDialog sidWarn = showSimpleInfoDialog(Jaguar.this, "", true, "No text was selected.");      }      else {        SimpleAttributeSet sasText = new SimpleAttributeSet(parentTextPane.getCharacterAttributes());        sasText.addAttribute(htmlTag, new SimpleAttributeSet());        int iStart = parentTextPane.getSelectionStart();        int iEnd = parentTextPane.getSelectionEnd();        htmlDoc.startUndoableSequence();        parentTextPane.select(iStart, iEnd);        parentTextPane.setCharacterAttributes(sasText, false);        Jaguar.this.refreshOnUpdate();        parentTextPane.select(iStart, iEnd);        htmlDoc.endUndoableSequence();      }    }  }  /** Class for automatically creating bulleted lists from selected text    */  private class ListAutomationAction extends HTMLEditorKit.InsertHTMLTextAction {    private HTML.Tag baseTag;    private boolean ordered;    public ListAutomationAction(String sLabel, HTML.Tag listType) {      super(sLabel, "", listType, HTML.Tag.LI);      baseTag = listType;      ordered = HTML.Tag.OL.equals(listType);    }    public void actionPerformed(ActionEvent ae) {      try {        JTextPane jepEditor = (JTextPane)(Jaguar.this.getTextPane());        String sListType = (baseTag.equals(HTML.Tag.OL) ? "ol" : "ul");        MutableHTMLDocument htmlDoc = (MutableHTMLDocument)(jepEditor.getDocument());        int iStart = jepEditor.getSelectionStart();        int iEnd   = jepEditor.getSelectionEnd();        String selText = htmlDoc.getText(iStart, iEnd - iStart);        //if (selText == null || selText.length() == 0)          //selText = "&nbsp;";        if (selText == null || selText.length() == 0) {          SimpleInfoDialog sidWarn = showSimpleInfoDialog(Jaguar.this, "", true, "Please select lines or paragraphs first.");        } else {          StringBuffer sbNew = new StringBuffer();          String sToken = ((selText.indexOf("\r") > -1) ? "\r" : "\n");          java.util.StringTokenizer stTokenizer = new java.util.StringTokenizer(selText, sToken);          sbNew.append("<" + sListType + ">");          while (stTokenizer.hasMoreTokens()) {            sbNew.append("<li>");            sbNew.append(stTokenizer.nextToken());            sbNew.append("</li>");          }          sbNew.append("</" + sListType + ">");          htmlDoc.startUndoableSequence();          if (iEnd != iStart) {            htmlDoc.remove(iStart, iEnd - iStart);          }          insertHTML(jepEditor, htmlDoc, iStart, sbNew.toString(), 1, 1, null);          htmlDoc.endUndoableSequence();        }      } catch (BadLocationException e) {        showSimpleInfoDialog(Jaguar.this, "", true, "Cannot convert the selected text to a list.");      }    }  }  /** Class for handling CSS style events    */  public class StylesAction extends StyledEditorKit.StyledTextAction {    public StylesAction() {      super("css-style");    }    public void actionPerformed(ActionEvent e) {      if (!(this.isEnabled())) {        return;      }      JEditorPane editor = getEditor(e);      if (editor != null) {        String stylename = (String)(jcmbStyleSelector.getSelectedItem());        if (stylename == null) {          return;        } else if(stylename.equals("(none)")) {          return;        }        boolean replace = false;        MutableAttributeSet	attr = null;        SimpleAttributeSet cls = new SimpleAttributeSet();        cls.addAttribute(HTML.Attribute.CLASS, stylename);        attr = new SimpleAttributeSet();        attr.addAttribute(HTML.Tag.FONT, cls);        MutableAttributeSet inattr = htmlKit.getInputAttributes();        inattr.addAttributes(attr);        setCharacterAttributes(jtpMain, attr, replace);      }    }  }  /** Class for providing JFileChooser with a FileFilter    */  private static class MutableFilter extends FileFilter {    private String[] acceptableExtensions;    private String descriptor;    public MutableFilter(String[] exts, String desc) {      acceptableExtensions = exts;      StringBuffer strbDesc = new StringBuffer(desc + " (");      for (int i = 0; i < acceptableExtensions.length; i++) {        if (i > 0) { strbDesc.append(", "); }        strbDesc.append("*." + acceptableExtensions[i]);      }      strbDesc.append(")");      descriptor = strbDesc.toString();    }    public boolean accept(File file) {      if (file.isDirectory()) {        return true;      }      String fileName = file.getName();      String fileExt = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length()).toLowerCase();      if (fileExt != null) {        for (int i = 0; i < acceptableExtensions.length; i++) {          if (fileExt.equals(acceptableExtensions[i])) {            return true;          }        }        return false;      } else {        return false;      }    }    public String getDescription() {      return descriptor;    }  }  /** Class for providing a dialog that lets the user specify values for tag attributes    */  private static class UserInputDialog extends JDialog {    private String[] inputTexts;    private JOptionPane jOptionPane;    public UserInputDialog(Frame parent, String title, boolean bModal, String[] attribNames, String[] initialStrs) {      super(parent, title, bModal);      init(parent, attribNames, initialStrs);    }    public UserInputDialog(Dialog parent, String title, boolean bModal, String[] attribNames, String[] initialStrs) {      super(parent, title, bModal);      init(parent, attribNames, initialStrs);    }    private void init(Component parent, String[] attribNames, String[] initialStrs) {      final Object[] buttonLabels = { Lang.rb.getString("DialogAccept"), Lang.rb.getString("DialogCancel") };      final JTextField[] jtxfInputs = new JMyTextField[attribNames.length];      inputTexts = new String[attribNames.length];      Object[] panelContents = new Object[2*attribNames.length];      for (int i=0; i<attribNames.length; i++) {        jtxfInputs[i] = new JMyTextField(32);        Utils.initKeyBindings(jtxfInputs[i]);        jtxfInputs[i].setText(initialStrs[i]);        jtxfInputs[i].selectAll();        panelContents[i*2+0] = attribNames[i];        panelContents[i*2+1] = jtxfInputs[i];        jtxfInputs[i].addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          jOptionPane.setValue(buttonLabels[0]);        }      });      }      jOptionPane = new JOptionPane(panelContents, JOptionPane.QUESTION_MESSAGE, JOptionPane.OK_CANCEL_OPTION, null, buttonLabels, buttonLabels[0]);      setContentPane(jOptionPane);      setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);      addWindowListener(new WindowAdapter() {        public void windowClosing(WindowEvent we) {          jOptionPane.setValue(Integer.valueOf(JOptionPane.CLOSED_OPTION));        }      });      jOptionPane.addPropertyChangeListener(new PropertyChangeListener() {        public void propertyChange(PropertyChangeEvent e) {          String prop = e.getPropertyName();          if( isVisible()            && (e.getSource() == jOptionPane)            && (prop.equals(JOptionPane.VALUE_PROPERTY) || prop.equals(JOptionPane.INPUT_VALUE_PROPERTY)))          {            Object value = jOptionPane.getValue();            if (value == JOptionPane.UNINITIALIZED_VALUE) {              return;            }            jOptionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);            if (value.equals(buttonLabels[0])) {              for (int i=0; i<jtxfInputs.length; i++) {                inputTexts[i] = jtxfInputs[i].getText();              }              setVisible(false);            } else {              for (int i=0; i<jtxfInputs.length; i++) {                inputTexts[i] = null;              }              setVisible(false);            }          }        }      });      this.pack();      this.setLocationRelativeTo(parent);      this.setVisible(true);      jtxfInputs[0].requestFocus();    }    public String getInputText(int index) {      return inputTexts[index];    }  }  /** Class for providing a dialog that lets the user specify values for tag attributes    */  private static class TableInputDialog extends JDialog {    private String inputRows   = "";    private String inputCols   = "";    private String inputBorder = "";    private String inputSpace  = "";    private String inputPad    = "";    private JOptionPane jOptionPane;    public TableInputDialog(Frame parent, String title, boolean bModal) {      super(parent, title, bModal);      init(parent);    }    public TableInputDialog(Dialog parent, String title, boolean bModal) {      super(parent, title, bModal);      init(parent);    }    private void init(Component parent) {      final JTextField jtxfRows   = new JMyTextField(3);      final JTextField jtxfCols   = new JMyTextField(3);      final JTextField jtxfBorder = new JMyTextField(3);      final JTextField jtxfSpace  = new JMyTextField(3);      final JTextField jtxfPad    = new JMyTextField(3);      Utils.initKeyBindings(jtxfRows);      Utils.initKeyBindings(jtxfCols);      Utils.initKeyBindings(jtxfBorder);      Utils.initKeyBindings(jtxfSpace);      Utils.initKeyBindings(jtxfPad);      Object[] panelContents = { Lang.rb.getString("TableRows"), jtxfRows, Lang.rb.getString("TableColumns"), jtxfCols, Lang.rb.getString("TableBorder"), jtxfBorder, Lang.rb.getString("TableCellSpacing"), jtxfSpace, Lang.rb.getString("TableCellPadding"), jtxfPad };      final Object[] buttonLabels  = { Lang.rb.getString("DialogAccept"), Lang.rb.getString("DialogCancel") };      jOptionPane = new JOptionPane(panelContents, JOptionPane.QUESTION_MESSAGE, JOptionPane.OK_CANCEL_OPTION, null, buttonLabels, buttonLabels[0]);      setContentPane(jOptionPane);      setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);      addWindowListener(new WindowAdapter() {        public void windowClosing(WindowEvent we) {          jOptionPane.setValue(Integer.valueOf(JOptionPane.CLOSED_OPTION));        }      });      jOptionPane.addPropertyChangeListener(new PropertyChangeListener() {        public void propertyChange(PropertyChangeEvent e) {          String prop = e.getPropertyName();          if(isVisible()            && (e.getSource() == jOptionPane)            && (prop.equals(JOptionPane.VALUE_PROPERTY) || prop.equals(JOptionPane.INPUT_VALUE_PROPERTY)))          {            Object value = jOptionPane.getValue();            if (value == JOptionPane.UNINITIALIZED_VALUE) {              return;            }            jOptionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);            if(value.equals(buttonLabels[0])) {              inputRows   = jtxfRows.getText();              inputCols   = jtxfCols.getText();              inputBorder = jtxfBorder.getText();              inputSpace  = jtxfSpace.getText();              inputPad    = jtxfPad.getText();              setVisible(false);            } else {              inputRows   = "";              inputCols   = "";              inputBorder = "";              inputSpace  = "";              inputPad    = "";              setVisible(false);            }          }        }      });      this.pack();      this.setLocationRelativeTo(parent);    }    public int getRows() {      try {        return Integer.parseInt(inputRows);      } catch (NumberFormatException nfe) {        return -1;      }    }    public int getCols() {      try {        return Integer.parseInt(inputCols);      } catch (NumberFormatException nfe) {        return -1;      }    }    public int getBorder() {      try {        return Integer.parseInt(inputBorder);      } catch (NumberFormatException nfe) {        return -1;      }    }    public int getSpacing() {      try {        return Integer.parseInt(inputSpace);      } catch (NumberFormatException nfe) {        return -1;      }    }    public int getPadding() {      try {        return Integer.parseInt(inputPad);      } catch (NumberFormatException nfe) {        return -1;      }    }  }  /** Class for providing a chooser that lets the user select an image to insert    */  private static class ImageFileChooser extends JFileChooser {    /** Constructor that takes a default directory to start in, specified as a File      * @param File with the default path      */    public ImageFileChooser(File fileCurrentDirectory) {      this.setCurrentDirectory(fileCurrentDirectory);      this.setAccessory(new ImageFileChooserPreview(this));     }    /** Constructor that takes a default directory to start in, specified as a String      * @param String current directory path.      */    public ImageFileChooser(String strCurrentPath) {      this(new File(strCurrentPath));    }    /** Empty constructor      */    public ImageFileChooser() {      this((File)null);    }  }  /** Class provides a preview window for the selected image file    */  private static class ImageFileChooserPreview extends JComponent implements PropertyChangeListener {    private static final int previewWidth  = 100;    private static final int previewHeight = 100;    private ImageIcon imageThumb = null;    private File imageFile = null;    /** This class requires a file chooser to register with so this class will      * be notified when a new file is selected in the browser.      * @param JFileChooser that this preview window is used in.      */    public ImageFileChooserPreview(JFileChooser fc) {      setPreferredSize(new Dimension(previewWidth , previewHeight));      fc.addPropertyChangeListener(this);    }    /** Loads a new image into the preview window, and scales it if necessary.      */    public void loadImage() {      if (imageFile == null) {        imageThumb = null;        return;      }      imageThumb = new ImageIcon(imageFile.getPath());      // Check if thumb requires scaling      if (imageThumb.getIconHeight() < previewHeight && imageThumb.getIconWidth() < previewWidth) {        return;      }      int	w = previewWidth;      int	h = previewHeight;      if (imageThumb.getIconHeight() > imageThumb.getIconWidth()) {        w = -1;      } else {        h = -1;      }      imageThumb = new ImageIcon(imageThumb.getImage().getScaledInstance(w, h, Image.SCALE_DEFAULT));    }    /** Callback (event handler) to indicate that a property of the      * JFileChooser has changed. If the selected file has changed cause a new      * thumbnail to load.      */    public void propertyChange(PropertyChangeEvent e) {      if (e.getPropertyName().equals(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY)) {        imageFile = (File)e.getNewValue();        if (isShowing()) {          loadImage();          repaint();        }      }    }    /** Paints the icon of the current image, if one's present..      * @param Graphics object to use when painting the component.      */    public void paintComponent(Graphics g) {      if (imageThumb == null) {        loadImage();      }      if (imageThumb == null) {        return;      }      int	x = (getWidth() - imageThumb.getIconWidth()) / 2;      int	y = (getHeight() - imageThumb.getIconHeight()) / 2;      if (y < 0) {        y = 0;      }      if (x < 5) {        x = 5;      }      imageThumb.paintIcon(this, g, x, y);    }  }  /** Class for providing a dialog that lets the user specify arguments for    * the Search Find/Replace functions    */  private static class SearchDialog extends JDialog {    private String inputFindTerm    = (String)null;    private String inputReplaceTerm = (String)null;    private boolean bCaseSensitive  = false;    private boolean bStartAtTop     = false;    private boolean bReplaceAll     = false;    private JOptionPane jOptionPane;    public SearchDialog(Frame parent, String title, boolean bModal, boolean bIsReplace, boolean bCaseSetting, boolean bTopSetting) {      super(parent, title, bModal);      init(parent, bIsReplace, bCaseSetting, bTopSetting);    }    public SearchDialog(Dialog parent, String title, boolean bModal, boolean bIsReplace, boolean bCaseSetting, boolean bTopSetting) {      super(parent, title, bModal);      init(parent, bIsReplace, bCaseSetting, bTopSetting);    }    private void init(Component parent, boolean bIsReplace, boolean bCaseSetting, boolean bTopSetting) {      final boolean isReplaceDialog = bIsReplace;      final JTextField jtxfFindTerm    = new JMyTextField(3);      final JTextField jtxfReplaceTerm = new JMyTextField(3);      Utils.initKeyBindings(jtxfFindTerm);      Utils.initKeyBindings(jtxfReplaceTerm);      final JCheckBox  jchkCase        = new JMyCheckBox(Lang.rb.getString("SearchCaseSensitive"), bCaseSetting);      final JCheckBox  jchkTop         = new JMyCheckBox(Lang.rb.getString("SearchStartAtTop"), bTopSetting);      final JCheckBox  jchkAll         = new JMyCheckBox(Lang.rb.getString("SearchReplaceAll"), false);      final Object[]   buttonLabels    = { Lang.rb.getString("DialogAccept"), Lang.rb.getString("DialogCancel") };      if (bIsReplace) {        Object[] panelContents = {          Lang.rb.getString("SearchFind"),          jtxfFindTerm,          Lang.rb.getString("SearchReplace"),          jtxfReplaceTerm,          jchkAll,          jchkCase,          jchkTop        };        jOptionPane = new JOptionPane(panelContents, JOptionPane.QUESTION_MESSAGE, JOptionPane.OK_CANCEL_OPTION, null, buttonLabels, buttonLabels[0]);      } else {        Object[] panelContents = {          Lang.rb.getString("SearchFind"),          jtxfFindTerm,          jchkCase,          jchkTop        };        jOptionPane = new JOptionPane(panelContents, JOptionPane.QUESTION_MESSAGE, JOptionPane.OK_CANCEL_OPTION, null, buttonLabels, buttonLabels[0]);      }      setContentPane(jOptionPane);      setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);      addWindowListener(new WindowAdapter() {        public void windowClosing(WindowEvent we) {          jOptionPane.setValue(Integer.valueOf(JOptionPane.CLOSED_OPTION));        }      });      jOptionPane.addPropertyChangeListener(new PropertyChangeListener() {        public void propertyChange(PropertyChangeEvent e) {          String prop = e.getPropertyName();          if (isVisible()            && (e.getSource() == jOptionPane)            && (prop.equals(JOptionPane.VALUE_PROPERTY) || prop.equals(JOptionPane.INPUT_VALUE_PROPERTY)))          {            Object value = jOptionPane.getValue();            if (value == JOptionPane.UNINITIALIZED_VALUE) {              return;            }            jOptionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);            if (value.equals(buttonLabels[0])) {              inputFindTerm  = jtxfFindTerm.getText();              bCaseSensitive = jchkCase.isSelected();              bStartAtTop    = jchkTop.isSelected();              if (isReplaceDialog) {                inputReplaceTerm = jtxfReplaceTerm.getText();                bReplaceAll      = jchkAll.isSelected();              }              setVisible(false);            } else {              inputFindTerm    = (String)null;              inputReplaceTerm = (String)null;              bCaseSensitive   = false;              bStartAtTop      = false;              bReplaceAll      = false;              setVisible(false);            }          }        }      });      this.pack();      this.setLocationRelativeTo(parent);      this.setVisible(true);      jtxfFindTerm.requestFocus();    }    public String  getFindTerm()      { return inputFindTerm; }    public String  getReplaceTerm()   { return inputReplaceTerm; }    public boolean getCaseSensitive() { return bCaseSensitive; }    public boolean getStartAtTop()    { return bStartAtTop; }    public boolean getReplaceAll()    { return bReplaceAll; }  }  /** Class for providing a dialog that lets the user specify values for tag attributes    */  private static class SimpleInfoDialog extends JDialog {    private JOptionPane jOptionPane;    public SimpleInfoDialog(Frame parent, String title, boolean bModal, String message) {      super(parent, title, bModal);      init(parent, message);    }    public SimpleInfoDialog(Dialog parent, String title, boolean bModal, String message) {      super(parent, title, bModal);      init(parent, message);    }    private void init(Component parent, String message) {      final Object[] buttonLabels  = { Lang.rb.getString("DialogClose") };      jOptionPane = new JOptionPane(message, JOptionPane.WARNING_MESSAGE, JOptionPane.DEFAULT_OPTION, null, buttonLabels, buttonLabels[0]);      setContentPane(jOptionPane);      setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);      addWindowListener(new WindowAdapter() {        public void windowClosing(WindowEvent we) {          jOptionPane.setValue(Integer.valueOf(JOptionPane.CLOSED_OPTION));        }      });      jOptionPane.addPropertyChangeListener(new PropertyChangeListener() {        public void propertyChange(PropertyChangeEvent e) {          String prop = e.getPropertyName();          if(isVisible()            && (e.getSource() == jOptionPane)            && (prop.equals(JOptionPane.VALUE_PROPERTY) || prop.equals(JOptionPane.INPUT_VALUE_PROPERTY)))          {            setVisible(false);          }        }      });      this.pack();      this.setLocationRelativeTo(parent);      this.setVisible(true);    }  }  private static void addSeparator(JToolBar jToolBar) {    JPanel sep = new JPanel();    int sepSize = 22;    sep.setLayout(null);    int orientation = jToolBar.getOrientation() != SwingConstants.VERTICAL ? SwingConstants.VERTICAL : SwingConstants.HORIZONTAL;    if (orientation == SwingConstants.VERTICAL) {      sep.setSize(new java.awt.Dimension(1, sepSize));      sep.setMaximumSize(new java.awt.Dimension(1, sepSize));      sep.setPreferredSize(new java.awt.Dimension(1, sepSize));    }    else {      sep.setSize(new java.awt.Dimension(sepSize, 1));      sep.setMaximumSize(new java.awt.Dimension(sepSize, 1));      sep.setPreferredSize(new java.awt.Dimension(sepSize, 1));    }    sep.setBackground(sep.getBackground().darker());    jToolBar.add(sep);  }}